/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * DlgLhtBiaya.java
 *
 * Created on 12 Jul 10, 16:21:34
 */
package laporan;

import fungsi.WarnaTable;
import fungsi.batasInput;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author perpustakaan
 */
public final class DlgRl38Laboratorium extends javax.swing.JDialog {

    private final DefaultTableModel tabMode;
    private Connection koneksi = koneksiDB.condb();
    private sekuel Sequel = new sekuel();
    private validasi Valid = new validasi();
    private PreparedStatement pstindakan, pstindakan2;
    private ResultSet rstindakan, rstindakan2;
    private int i = 0, a = 0, ttl = 0, jumlahl = 0, jumlahp = 0, ttljumlahl = 0, ttljumlahp = 0, nilaitotall = 0, nilaitotalp = 0, ttlnilaitotall = 0, ttnilaip = 0, jumlahpasienl = 0, jumlahpasienp = 0, ratal = 0, ratap = 0, ttlratal = 0, ttlratap = 0;

    /**
     * Creates new form DlgLhtBiaya
     *
     * @param parent
     * @param modal
     */
    public DlgRl38Laboratorium(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocation(8, 1);
        setSize(885, 674);

        Object[] rowRwJlDr = {"No.", "Jenis Kegiatan", "Jumlah (L)", "Jumlah (P)", "RATA-RATA (L)", "RATA-RATA (P)"};
        tabMode = new DefaultTableModel(null, rowRwJlDr) {
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };
        tbBangsal.setModel(tabMode);
        //tbBangsal.setDefaultRenderer(Object.class, new WarnaTable(jPanel2.getBackground(),tbBangsal.getBackground()));
        tbBangsal.setPreferredScrollableViewportSize(new Dimension(500, 500));
        tbBangsal.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (i = 0; i < 6; i++) {
            TableColumn column = tbBangsal.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(40);
            } else if (i == 1) {
                column.setPreferredWidth(650);
            } else {
                column.setPreferredWidth(100);
            }
        }
        tbBangsal.setDefaultRenderer(Object.class, new WarnaTable());

        TCari.setDocument(new batasInput((byte) 100).getKata(TCari));

        try {            
            pstindakan = koneksi.prepareStatement("select jns_perawatan_lab.nm_perawatan,jns_perawatan_lab.kd_jenis_prw from periksa_lab "
                    + "inner join jns_perawatan_lab on periksa_lab.kd_jenis_prw=jns_perawatan_lab.kd_jenis_prw "
                    + "where jns_perawatan_lab.nm_perawatan like ? group by jns_perawatan_lab.nm_perawatan ");
            pstindakan2 = koneksi.prepareStatement("select template_laboratorium.Pemeriksaan,template_laboratorium.kd_jenis_prw from detail_periksa_lab "
                    + "inner join template_laboratorium on detail_periksa_lab.id_template=template_laboratorium.id_template "
                    + "where template_laboratorium.Pemeriksaan like ? and template_laboratorium.kd_jenis_prw=? group by template_laboratorium.Pemeriksaan ");
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new widget.InternalFrame();
        Scroll = new widget.ScrollPane();
        tbBangsal = new widget.Table();
        panelGlass5 = new widget.panelisi();
        label11 = new widget.Label();
        Tgl1 = new widget.Tanggal();
        label18 = new widget.Label();
        Tgl2 = new widget.Tanggal();
        jLabel6 = new widget.Label();
        TCari = new widget.TextBox();
        BtnCari = new widget.Button();
        BtnAll = new widget.Button();
        jLabel7 = new widget.Label();
        BtnPrint = new widget.Button();
        BtnKeluar = new widget.Button();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 245, 235)), "::[ RL 3.8 Rekapitulasi Kegiatan Pelayanan Laboratorium ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(50, 50, 50))); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);

        tbBangsal.setName("tbBangsal"); // NOI18N
        Scroll.setViewportView(tbBangsal);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        panelGlass5.setName("panelGlass5"); // NOI18N
        panelGlass5.setPreferredSize(new java.awt.Dimension(55, 55));
        panelGlass5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        label11.setText("Tanggal :");
        label11.setName("label11"); // NOI18N
        label11.setPreferredSize(new java.awt.Dimension(50, 23));
        panelGlass5.add(label11);

        Tgl1.setDisplayFormat("dd-MM-yyyy");
        Tgl1.setName("Tgl1"); // NOI18N
        Tgl1.setPreferredSize(new java.awt.Dimension(90, 23));
        panelGlass5.add(Tgl1);

        label18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label18.setText("s.d.");
        label18.setName("label18"); // NOI18N
        label18.setPreferredSize(new java.awt.Dimension(25, 23));
        panelGlass5.add(label18);

        Tgl2.setDisplayFormat("dd-MM-yyyy");
        Tgl2.setName("Tgl2"); // NOI18N
        Tgl2.setPreferredSize(new java.awt.Dimension(90, 23));
        panelGlass5.add(Tgl2);

        jLabel6.setText("Key Word :");
        jLabel6.setName("jLabel6"); // NOI18N
        jLabel6.setPreferredSize(new java.awt.Dimension(60, 23));
        panelGlass5.add(jLabel6);

        TCari.setName("TCari"); // NOI18N
        TCari.setPreferredSize(new java.awt.Dimension(155, 23));
        TCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TCariKeyPressed(evt);
            }
        });
        panelGlass5.add(TCari);

        BtnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/accept.png"))); // NOI18N
        BtnCari.setMnemonic('2');
        BtnCari.setToolTipText("Alt+2");
        BtnCari.setName("BtnCari"); // NOI18N
        BtnCari.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariActionPerformed(evt);
            }
        });
        BtnCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnCariKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnCari);

        BtnAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Search-16x16.png"))); // NOI18N
        BtnAll.setMnemonic('M');
        BtnAll.setToolTipText("Alt+M");
        BtnAll.setName("BtnAll"); // NOI18N
        BtnAll.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAllActionPerformed(evt);
            }
        });
        BtnAll.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnAllKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnAll);

        jLabel7.setName("jLabel7"); // NOI18N
        jLabel7.setPreferredSize(new java.awt.Dimension(30, 23));
        panelGlass5.add(jLabel7);

        BtnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/b_print.png"))); // NOI18N
        BtnPrint.setMnemonic('T');
        BtnPrint.setText("Cetak");
        BtnPrint.setToolTipText("Alt+T");
        BtnPrint.setName("BtnPrint"); // NOI18N
        BtnPrint.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrintActionPerformed(evt);
            }
        });
        BtnPrint.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnPrintKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnPrint);

        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnKeluar);

        internalFrame1.add(panelGlass5, java.awt.BorderLayout.PAGE_END);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 50));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48x48/report24.png"))); // NOI18N
        jLabel1.setText("RL 3.8 - Laboratorium");
        jLabel1.setIconTextGap(10);
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel1.add(jLabel1);

        internalFrame1.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrintActionPerformed
//        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//        if (tabMode.getRowCount() == 0) {
//            JOptionPane.showMessageDialog(null, "Maaf, data sudah habis. Tidak ada data yang bisa anda print...!!!!");
//            //TCari.requestFocus();
//        } else if (tabMode.getRowCount() != 0) {
//
//            Map<String, Object> param = new HashMap<>();
//            param.put("namars", akses.getnamars());
//            param.put("alamatrs", akses.getalamatrs());
//            param.put("kotars", akses.getkabupatenrs());
//            param.put("propinsirs", akses.getpropinsirs());
//            param.put("kontakrs", akses.getkontakrs());
//            param.put("emailrs", akses.getemailrs());
//            param.put("periode", Tgl1.getSelectedItem() + " s.d. " + Tgl2.getSelectedItem());
//            param.put("tanggal", Tgl2.getDate());
//            param.put("logo", Sequel.cariGambar("select setting.logo from setting"));
//            Sequel.queryu("delete from temporary where temp37='" + akses.getalamatip() + "'");
//            for (int r = 0; r < tabMode.getRowCount(); r++) {
//                if (!tbBangsal.getValueAt(r, 0).toString().contains(">>")) {
//                    Sequel.menyimpan("temporary", "'" + r + "','"
//                            + tabMode.getValueAt(r, 0).toString() + "','"
//                            + tabMode.getValueAt(r, 1).toString() + "','"
//                            + tabMode.getValueAt(r, 2).toString() + "','"
//                            + tabMode.getValueAt(r, 3).toString() + "','"
//                            + tabMode.getValueAt(r, 4).toString() + "','"
//                            + tabMode.getValueAt(r, 5).toString() + "','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','" + akses.getalamatip() + "'", "Rekap Nota Pembayaran");
//                }
//            }
//
//            Valid.MyReportqry("rptRl38.jasper", "report", "::[ Formulir RL 3.8 ]::", "select * from temporary where temporary.temp37='" + akses.getalamatip() + "' order by temporary.no", param);
//        }
//        this.setCursor(Cursor.getDefaultCursor());

//    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//    if (tabMode.getRowCount() == 0) {
//        JOptionPane.showMessageDialog(null, "Maaf, data sudah habis. Tidak ada data yang bisa anda print...!!!!");
//    } else if (tabMode.getRowCount() != 0) {
//
//        Map<String, Object> param = new HashMap<>();
//        param.put("namars", akses.getnamars());
//        param.put("alamatrs", akses.getalamatrs());
//        param.put("kotars", akses.getkabupatenrs());
//        param.put("propinsirs", akses.getpropinsirs());
//        param.put("kontakrs", akses.getkontakrs());
//        param.put("emailrs", akses.getemailrs());
//        param.put("periode", Tgl1.getSelectedItem() + " s.d. " + Tgl2.getSelectedItem());
//        param.put("tanggal", Tgl2.getDate());
//        param.put("logo", Sequel.cariGambar("select setting.logo from setting"));
//
//        Sequel.queryu("delete from temporary where temp37='" + akses.getalamatip() + "'");
//
//        String query = "INSERT INTO temporary VALUES (" + "?, ".repeat(37) + "?" + ")";
//        try (PreparedStatement ps = koneksi.prepareStatement(query)) {
//            for (int r = 0; r < tabMode.getRowCount(); r++) {
//                if (!tbBangsal.getValueAt(r, 0).toString().contains(">>")) {
//                    ps.setInt(1, r); // Kolom 'no'
//                    for (int i = 0; i < 37; i++) { // Isi temp1 - temp37
//                        ps.setString(i + 2, (i < tabMode.getColumnCount() && tabMode.getValueAt(r, i) != null) ? tabMode.getValueAt(r, i).toString() : "");
//                    }
//                    ps.executeUpdate();
//                }
//            }
//        } catch (SQLException e) {
//            System.out.println("Error saat menyimpan data ke temporary: " + e.getMessage());
//        }
//        
//        try {
//        String reportPath = new File("report/rptRl38.jasper").getCanonicalPath();
//        System.out.println("Mencari file report di: " + reportPath);
//
//        if (new File(reportPath).exists()) {
//            Valid.MyReportqry("rptRl38.jasper", "report", "::[ Formulir RL 3.8 ]::",
//                "select * from temporary where temp37='" + akses.getalamatip() + "' order by no asc", param);
//        } else {
//            System.out.println("Report file not found at: " + reportPath);
//            JOptionPane.showMessageDialog(null, "Report file not found at: " + reportPath);
//        }
//    } catch (IOException e) {
//        System.out.println("Error saat mencari file report: " + e.getMessage());
//        JOptionPane.showMessageDialog(null, "Error saat mencari file report: " + e.getMessage());
//    }
//
//
//    }
//    this.setCursor(Cursor.getDefaultCursor());

//    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//    if (tabMode.getRowCount() == 0) {
//        JOptionPane.showMessageDialog(null, "Maaf, data sudah habis. Tidak ada data yang bisa anda print...!!!!");
//    } else if (tabMode.getRowCount() != 0) {
//
//        Map<String, Object> param = new HashMap<>();
//        param.put("namars", akses.getnamars());
//        param.put("alamatrs", akses.getalamatrs());
//        param.put("kotars", akses.getkabupatenrs());
//        param.put("propinsirs", akses.getpropinsirs());
//        param.put("kontakrs", akses.getkontakrs());
//        param.put("emailrs", akses.getemailrs());
//        param.put("periode", Tgl1.getSelectedItem() + " s.d. " + Tgl2.getSelectedItem());
//        param.put("tanggal", Tgl2.getDate());
//        param.put("logo", Sequel.cariGambar("select setting.logo from setting"));
//        param.put("IS_IGNORE_PAGINATION", true);
//        param.put("alamatip", akses.getalamatip());
//
//        Sequel.queryu("delete from temporary where temp37='" + akses.getalamatip() + "'");
//
//        String query = "INSERT INTO temporary VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
//        int insertedRows = 0; // untuk melacak jumlah baris yang masuk ke temporary
//
//        try (PreparedStatement ps = koneksi.prepareStatement(query)) {
//            for (int r = 0; r < tabMode.getRowCount(); r++) {
//                if (!tbBangsal.getValueAt(r, 0).toString().contains(">>")) {
//                    ps.setInt(1, r); // Kolom 'no'
//                    for (int i = 0; i < 37; i++) { // Isi temp1 - temp37
//                        ps.setString(i + 2, (i < tabMode.getColumnCount() && tabMode.getValueAt(r, i) != null) ? tabMode.getValueAt(r, i).toString() : "");
//                    }
//                    ps.executeUpdate();
//                    insertedRows++;
//                }
//            }
//        } catch (SQLException e) {
//            System.out.println("Error saat menyimpan data ke temporary: " + e.getMessage());
//        }
//
//        System.out.println("Jumlah data yang berhasil diinsert ke temporary: " + insertedRows);
//
//        if (insertedRows == 0) {
//            JOptionPane.showMessageDialog(null, "Data tidak valid. Laporan tidak bisa dicetak.");
//        } else {
//            String sql = "select * from temporary where temp37='" + akses.getalamatip() + "' order by no asc";
//            System.out.println("Query yang dijalankan: " + sql);
//
//            try {
//                Valid.MyReportqry("rptRl38.jasper", "report", "::[ Formulir RL 3.8 ]::", sql, param);
//            } catch (Exception e) {
//                System.out.println("Error saat mencari file report: " + e.getMessage());
//            }
//        }
//    }
//    this.setCursor(Cursor.getDefaultCursor());

    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    if (tabMode.getRowCount() == 0) {
        JOptionPane.showMessageDialog(null, "Maaf, data sudah habis. Tidak ada data yang bisa anda print...!!!!");
    } else {
        try {
            StringBuilder htmlContent = new StringBuilder();
            htmlContent.append("<html><head><title>Laporan RL 3.8</title></head><body>");
            htmlContent.append("<h2 style='text-align: center;'>Formulir RL 3.8</h2>");
            htmlContent.append("<p><strong>Periode: </strong>").append(Tgl1.getSelectedItem())
                      .append(" s.d. ").append(Tgl2.getSelectedItem()).append("</p>");
            htmlContent.append("<table border='1' cellpadding='5' cellspacing='0' style='width: 100%; border-collapse: collapse;'>");
            htmlContent.append("<tr><th>No</th><th>No.</th><th>Jenis Kegiatan</th><th>Jumlah (L)</th><th>Jumlah (P)</th><th>Rata2 (L)</th><th>Rata2 (P)</th></tr>");
            
            for (int r = 0; r < tabMode.getRowCount(); r++) {
                if (!tbBangsal.getValueAt(r, 0).toString().contains(">>")) {
                    htmlContent.append("<tr>");
                    htmlContent.append("<td>").append(r + 1).append("</td>");
                    for (int c = 0; c <= 5; c++) {
                        htmlContent.append("<td>").append(tabMode.getValueAt(r, c).toString()).append("</td>");
                    }
                    htmlContent.append("</tr>");
                }
            }
            
            htmlContent.append("</table></body></html>");

            // Simpan file HTML
            String filePath = "report/RL38_Report.html";
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
                writer.write(htmlContent.toString());
            }

            // Buka file HTML di browser
            Desktop.getDesktop().browse(new File(filePath).toURI());
            
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + ex.getMessage());
        }
    }
    this.setCursor(Cursor.getDefaultCursor());

}//GEN-LAST:event_BtnPrintActionPerformed

    private void BtnPrintKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnPrintKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnPrintActionPerformed(null);
        } else {
            //Valid.pindah(evt, BtnHapus, BtnAll);
        }
}//GEN-LAST:event_BtnPrintKeyPressed

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        dispose();
}//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            dispose();
        } else {
            Valid.pindah(evt, BtnKeluar, TCari);
        }
}//GEN-LAST:event_BtnKeluarKeyPressed

private void BtnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariActionPerformed
    tampil();
}//GEN-LAST:event_BtnCariActionPerformed

private void BtnCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnCariKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        tampil();
        this.setCursor(Cursor.getDefaultCursor());
    } else {
        Valid.pindah(evt, TCari, BtnPrint);
    }
}//GEN-LAST:event_BtnCariKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        tampil();
    }//GEN-LAST:event_formWindowOpened

    private void TCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TCariKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            BtnCariActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_DOWN) {
            BtnCari.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_UP) {
            BtnKeluar.requestFocus();
        }
    }//GEN-LAST:event_TCariKeyPressed

    private void BtnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAllActionPerformed
        TCari.setText("");
        tampil();
    }//GEN-LAST:event_BtnAllActionPerformed

    private void BtnAllKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnAllKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnAllActionPerformed(null);
        } else {

        }
    }//GEN-LAST:event_BtnAllKeyPressed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        tampil();

    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgRl38Laboratorium dialog = new DlgRl38Laboratorium(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnAll;
    private widget.Button BtnCari;
    private widget.Button BtnKeluar;
    private widget.Button BtnPrint;
    private widget.ScrollPane Scroll;
    private widget.TextBox TCari;
    private widget.Tanggal Tgl1;
    private widget.Tanggal Tgl2;
    private widget.InternalFrame internalFrame1;
    private javax.swing.JLabel jLabel1;
    private widget.Label jLabel6;
    private widget.Label jLabel7;
    private javax.swing.JPanel jPanel1;
    private widget.Label label11;
    private widget.Label label18;
    private widget.panelisi panelGlass5;
    private widget.Table tbBangsal;
    // End of variables declaration//GEN-END:variables

//    public void tampil() {
//        try {
//            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//            Valid.tabelKosong(tabMode);
//            pstindakan.setString(1, "%" + TCari.getText().trim() + "%");
//            rstindakan = pstindakan.executeQuery();
//            i = 1;
//            ttl = 0;
//            while (rstindakan.next()) {
//                tabMode.addRow(new Object[]{
//                    i, rstindakan.getString(1), "", "", "", ""
//                });
//                pstindakan2.setString(1, "%" + TCari.getText().trim() + "%");
//                pstindakan2.setString(2, rstindakan.getString(2));
//                rstindakan2 = pstindakan2.executeQuery();
//                a = 1;
//                jumlahl = 0;
//                jumlahp = 0;
//                ratal = 0;
//                ratap = 0;
//                ttljumlahl = 0;
//                ttljumlahp = 0;
//                nilaitotall = 0;
//                nilaitotalp = 0;
//                ttlnilaitotall = 0;
//                ttnilaip = 0;
//                ttlratal = 0;
//                ttlratap = 0;
//                while (rstindakan2.next()) {
//                    jumlahl = Sequel.cariInteger("select count(template_laboratorium.Pemeriksaan) FROM template_laboratorium INNER JOIN detail_periksa_lab "
//                            + "ON template_laboratorium.id_template = detail_periksa_lab.id_template INNER JOIN reg_periksa ON detail_periksa_lab.no_rawat = reg_periksa.no_rawat INNER JOIN pasien ON reg_periksa.no_rkm_medis = pasien.no_rkm_medis "
//                            + "where detail_periksa_lab.tgl_periksa between '" + Valid.SetTgl(Tgl1.getSelectedItem() + "") + "' and '" + Valid.SetTgl(Tgl2.getSelectedItem() + "") + "' "
//                            + "and template_laboratorium.kd_jenis_prw='" + rstindakan2.getString("kd_jenis_prw") + "' and pasien.jk = 'L' group by template_laboratorium.Pemeriksaan ");
//                    ttljumlahl = ttljumlahl + jumlahl;
//
//                    jumlahp = Sequel.cariInteger("select count(template_laboratorium.Pemeriksaan) FROM template_laboratorium INNER JOIN detail_periksa_lab "
//                            + "ON template_laboratorium.id_template = detail_periksa_lab.id_template INNER JOIN reg_periksa ON detail_periksa_lab.no_rawat = reg_periksa.no_rawat INNER JOIN pasien ON reg_periksa.no_rkm_medis = pasien.no_rkm_medis "
//                            + "where detail_periksa_lab.tgl_periksa between '" + Valid.SetTgl(Tgl1.getSelectedItem() + "") + "' and '" + Valid.SetTgl(Tgl2.getSelectedItem() + "") + "' "
//                            + "and template_laboratorium.kd_jenis_prw='" + rstindakan2.getString("kd_jenis_prw") + "' and pasien.jk = 'P' group by template_laboratorium.Pemeriksaan ");
//                    ttljumlahp = ttljumlahp + jumlahp;
//
//                    nilaitotall = Sequel.cariInteger("select SUM(CAST(detail_periksa_lab.nilai AS DECIMAL(10, 2))) AS nilai FROM template_laboratorium INNER JOIN detail_periksa_lab "
//                            + "ON template_laboratorium.id_template = detail_periksa_lab.id_template INNER JOIN reg_periksa ON detail_periksa_lab.no_rawat = reg_periksa.no_rawat INNER JOIN pasien ON reg_periksa.no_rkm_medis = pasien.no_rkm_medis "
//                            + "where detail_periksa_lab.tgl_periksa between '" + Valid.SetTgl(Tgl1.getSelectedItem() + "") + "' and '" + Valid.SetTgl(Tgl2.getSelectedItem() + "") + "' "
//                            + "and template_laboratorium.kd_jenis_prw='" + rstindakan2.getString("kd_jenis_prw") + "' and pasien.jk = 'L' group by template_laboratorium.Pemeriksaan ");
//
//                    jumlahpasienl = Sequel.cariInteger("SELECT count(periksa_lab.no_rawat) FROM periksa_lab INNER JOIN "
//                            + "reg_periksa ON periksa_lab.no_rawat = reg_periksa.no_rawat INNER JOIN pasien ON reg_periksa.no_rkm_medis = pasien.no_rkm_medis "
//                            + "where periksa_lab.tgl_periksa between '" + Valid.SetTgl(Tgl1.getSelectedItem() + "") + "' and '" + Valid.SetTgl(Tgl2.getSelectedItem() + "") + "' "
//                            + "and periksa_lab.kd_jenis_prw='" + rstindakan2.getString("kd_jenis_prw") + "' and pasien.jk = 'L'");
//
//                    nilaitotalp = Sequel.cariInteger("select SUM(CAST(detail_periksa_lab.nilai AS DECIMAL(10, 2))) AS nilai FROM template_laboratorium INNER JOIN detail_periksa_lab "
//                            + "ON template_laboratorium.id_template = detail_periksa_lab.id_template INNER JOIN reg_periksa ON detail_periksa_lab.no_rawat = reg_periksa.no_rawat INNER JOIN pasien ON reg_periksa.no_rkm_medis = pasien.no_rkm_medis "
//                            + "where detail_periksa_lab.tgl_periksa between '" + Valid.SetTgl(Tgl1.getSelectedItem() + "") + "' and '" + Valid.SetTgl(Tgl2.getSelectedItem() + "") + "' "
//                            + "and template_laboratorium.kd_jenis_prw='" + rstindakan2.getString("kd_jenis_prw") + "' and pasien.jk = 'P' group by template_laboratorium.Pemeriksaan ");
//
//                    jumlahpasienp = Sequel.cariInteger("SELECT count(periksa_lab.no_rawat) FROM periksa_lab INNER JOIN "
//                            + "reg_periksa ON periksa_lab.no_rawat = reg_periksa.no_rawat INNER JOIN pasien ON reg_periksa.no_rkm_medis = pasien.no_rkm_medis "
//                            + "where periksa_lab.tgl_periksa between '" + Valid.SetTgl(Tgl1.getSelectedItem() + "") + "' and '" + Valid.SetTgl(Tgl2.getSelectedItem() + "") + "' "
//                            + "and periksa_lab.kd_jenis_prw='" + rstindakan2.getString("kd_jenis_prw") + "' and pasien.jk = 'P'");
//
//                    if (jumlahpasienl != 0) {
//                        ratal = nilaitotall / jumlahpasienl;
//                    } else {
//                        ratal = 0; // Atur nilai default jika jumlah pasien laki-laki = 0
//                    }
//
//                    if (jumlahpasienp != 0) {
//                        ratap = nilaitotalp / jumlahpasienp;
//                    } else {
//                        ratap = 0; // Atur nilai default jika jumlah pasien perempuan = 0
//                    }
//
//                    tabMode.addRow(new Object[]{
//                        i + "." + a, rstindakan2.getString(1), jumlahl, jumlahp, ratal, ratap
//                    });
//                    //    ttl = ttl + rstindakan2.getInt(2);
//                    ttl = 0;
//                    a++;
//                }
//                //   ttl = ttl + rstindakan.getInt(2);
//                ttl = 0;
//                i++;
//            }
//
//            if (i > 1) {
//                tabMode.addRow(new Object[]{
//                    "", "TOTAL", ttljumlahl, ttljumlahp, ttlratal, ttlratap
//                });
//            }
//            this.setCursor(Cursor.getDefaultCursor());
//        } catch (Exception e) {
//            System.out.println("Notifikasi : " + e);
//        }
//    }        

private void tampil() {
    Valid.tabelKosong(tabMode);
    int nomor;
    tabMode.addRow(new Object[]{"A", "PATOLOGI KLINIK", "", "", "", ""}); // Header utama

    // Bagian Hematologi
    nomor = 1;
    tabMode.addRow(new Object[]{String.valueOf(nomor), "Hematologi", "", "", "", ""});
    tampilkanDataLab("1", new String[]{
        "Kadar Hemoglobin", "Nilai Hematokrit", "Hitung Lekosit", "Hitung Eritrosit", "Hitung Eosinophil", 
        "Hitung Jenis Lekosit (%/absolut)", "Laju Endap Darah", "Hitung Retikulosit", "Hitung Trombosit"
    });

    // Bagian Kimia Klinik
    nomor = 2;
    tabMode.addRow(new Object[]{String.valueOf(nomor), "Kimia Klinik", "", "", "", ""});    
    tampilkanDataLab("2", new String[]{
        "Protein Total", "Albumin", "Globulin", "Bilirubin Total/Direk/Indirek", "SGOT/AST", 
        "SGPT/ALT", "Ureum/BUN", "Kreatinin (eGFR)", "Asam Urat", "Trigliserida", 
        "Kolesterol Total", "Kolesterol HDL", "Kolesterol LDL (direk)", "Glukosa Sewaktu/Puasa / 2jam PP", "HbA1c", 
        "Fosfatase Alkali", "Gamma GT", "LDH", "G6PD", "Amilase", "Lipase", "Cholinesterase", "CK Total - CK MB", 
        "SI/TIBC", "Elektrolit Darah (Na, K, Cl, Ca, Mg, P)", "Analisa Gas Darah"
    });

    // Bagian Imunologi Klinik
    nomor = 3;
    tabMode.addRow(new Object[]{String.valueOf(nomor), "Imunologi Klinik", "", "", "", ""});
    tampilkanDataLab("3", new String[]{
        "Widal", "Antibodi Anti SARS-CoV-2", "Antigen SARS-CoV-2", "Dengue IgG-IgM", "HBsAg", "Anti HBs", 
        "Anti HBc", "Anti HBe", "HBe Ag", "Anti HCV", "IgM Anti HAV", "Anti HIV", 
        "NS1 (non structure antigen) Dengue", "Tes Antigen Malaria", "T3/T4 Total", "FT3/FT4", "TSH"
    });

    // Bagian Urinalisis dan Analisis Cairan
    nomor = 4;
    tabMode.addRow(new Object[]{String.valueOf(nomor), "Urinalisis dan Analisis Cairan", "", "", "", ""});
    tampilkanDataLab("4", new String[]{
        "Protein/Albumin", "Urobilinogen", "Bilirubin", "Sedimen Urine", "NAPZA Skrining"
    });

    // Bagian Hemostasis
    nomor = 5;
    tabMode.addRow(new Object[]{String.valueOf(nomor), "Hemostasis", "", "", "", ""});
    tampilkanDataLab("5", new String[]{
        "Masa Perdarahan", "Masa Pembekuan", "Masa Prothrombin Plasma", "Masa Tromboplastin Partial Teraktivasi", 
        "Masa Thrombin", "Fibrinogen", "D-Dimer", "Lupus Anticoagulant"
    });

    // Bagian Mikrobiologi Klinik
    tabMode.addRow(new Object[]{"B", "MIKROBIOLOGI KLINIK", "", "", "", ""});
    nomor = 6;
    tabMode.addRow(new Object[]{String.valueOf(nomor), "Pemeriksaan Dahak Mikroskopis TBC", "", "", "", ""});
    tampilkanDataLab("6", new String[]{
        "Negatif", "1-9", "1+", "2+", "3+", "Tidak Dilakukan"
    });

    tabMode.addRow(new Object[]{"7", "Biakan dan Identifikasi Bakteri Aerob serta Uji Kepekaan terhadap Antibiotik", "", "", "", ""});
    tabMode.addRow(new Object[]{"8", "Biakan Virus dan Uji Kepekaan terhadap Antivirus", "", "", "", ""});
    tabMode.addRow(new Object[]{"9", "Biakan dan Identifikasi M. Tuberculosis serta Uji Kepekaan terhadap OAT", "", "", "", ""});

        nomor = 10;
     tabMode.addRow(new Object[]{String.valueOf(nomor), "Pemeriksaan berbasis molekuler untuk deteksi virus DNA dan RNA terutama virus Influenza,SARS-CoV 1 dan 2, HIV", "", "", "", ""});
    tampilkanDataLab("10", new String[]{
        "PCR", "Real time PCR", "Tes Cepat Molekuler", "Hibridisasi","Sekuensing","Metode lainnya"        
    });
            
    nomor = 11;
     tabMode.addRow(new Object[]{String.valueOf(nomor), "Pemeriksaan Tes Cepat Molekuler (TCM) untuk TBC dan TBC Resistan Obat (RO)", "", "", "", ""});
    tampilkanDataLab("11", new String[]{
        "Negatif", "Rif Sen", "Rif Res", "Rif Indet","Invalid","Error","No Result","Tidak Dilakukan"        
    });
    
    nomor = 12;
     tabMode.addRow(new Object[]{String.valueOf(nomor), "Pemeriksaan berbasis molekuler untuk deteksi bakteri aerob, anaerob dan bakteri fastidious lainnya", "", "", "", ""});
    tampilkanDataLab("12", new String[]{
        "PCR", "Real time PCR", "Tes Cepat Molekuler", "Hibridisasi","Sekuensing","Metode lainnya"        
    });
    
    nomor = 13;
     tabMode.addRow(new Object[]{String.valueOf(nomor), "Pemeriksaan berbasis molekuler untuk deteksi gen pengkode resistensi antimikroba", "", "", "", ""});
    tampilkanDataLab("13", new String[]{
        "PCR", "Real time PCR", "Tes Cepat Molekuler", "Hibridisasi","Sekuensing","Metode lainnya"        
    });
    
    nomor = 14;
     tabMode.addRow(new Object[]{String.valueOf(nomor), "Pemeriksaan berbasis molekuler untuk deteksi jamur", "", "", "", ""});
    tampilkanDataLab("14", new String[]{
        "PCR", "Real time PCR", "Tes Cepat Molekuler", "Hibridisasi","Sekuensing","Metode lainnya"        
    });
    
    // Bagian Parasitologi Klinik
    
    tabMode.addRow(new Object[]{"C", "PARASITOLOGI KLINIK", "", "", "", ""});
    nomor = 15;
     tabMode.addRow(new Object[]{String.valueOf(nomor), "Pemeriksaan Mikroskopis", "", "", "", ""});
    tampilkanDataLab("15", new String[]{
        "Identifikasi Cacing, Larva, Proglottid", "Identifikasi Arthropoda (Tuma, Tungau, Pinjal, Kutu)", 
        "Identifikasi Nyamuk, Larva Nyamuk", "Identifikasi Lalat dan Larva Lalat"
    });
    
    nomor = 16;    
     tabMode.addRow(new Object[]{String.valueOf(nomor), "Pemeriksaan Jamur", "", "", "", ""});
    tampilkanDataLab("16", new String[]{
        "Pemeriksaan langsung KOH", "Pemeriksaan langsung LPCB/tinta India","Pemeriksaan jamur dengan pulasan khusus", 
        "Kultur dan identifikasi jamur dari spesimen kulit, rambut, kuku, mukosa, cairan tubuh (LCS, darah, urin, sputum, BAL, cairan pleura, cairan mata, cairan telinga)"
    });

    // Bagian Patologi Anatomi
    tabMode.addRow(new Object[]{"D", "PATOLOGI ANATOMI", "", "", "", ""});
    tabMode.addRow(new Object[]{"17", "Pemeriksaan tindakan biopsi aspirasi jarum halus dan/ atau tindakan kedokteran lainnya", "", "", "", ""});
    nomor = 18;  
     tabMode.addRow(new Object[]{String.valueOf(nomor), "Pemeriksaan Sitopatologi", "", "", "", ""});
    tampilkanDataLab("18", new String[]{
        "Pemeriksaan Pap’s Smear", "Pemeriksaan sitologi apus non ginekologi", "Pemeriksaan sitologi cairan"        
    });
    
    nomor = 19;  
     tabMode.addRow(new Object[]{String.valueOf(nomor), "Pemeriksaan Histopatologi", "", "", "", ""});
    tampilkanDataLab("19", new String[]{
        "Pemeriksaan jaringan kecil", "Pemeriksaan jaringan sedang", "Pemeriksaan jaringan besar"        
    });
    
    nomor = 20;  
     tabMode.addRow(new Object[]{String.valueOf(nomor), "Pemeriksaan Imunopatologi", "", "", "", ""});
    tampilkanDataLab("20", new String[]{
        "Pemeriksaan imunohistokimia Payudara", "Pemeriksaan imunohistokimia Limfoma", "Pemeriksaan imunohistokimia lanjutan (limfoma lanjut,kasus sulit, GIST, PD-L1, ALK, dll)",
        "Pemeriksaan imunositokimia","Pemeriksaan imunofluoresensi (deteksi auto antibodi,deteksi komplek imun pada jaringan kulit dan ginjal,dll)"
    });
    
    nomor = 21; 
     tabMode.addRow(new Object[]{String.valueOf(nomor), "Pemeriksaan Patologi Molekuler", "", "", "", ""});
    tampilkanDataLab("21", new String[]{
        "Deteksi Mutasi EGFR", "Deteksi Mutasi All-RAS", "Deteksi Mutasi BRAF", "HPV Genotyping", "ISH", 
        "CISH", "FISH"
    });

    tabMode.addRow(new Object[]{"22", "Pemeriksaan Potong Beku", "", "", "", ""});
    tabMode.addRow(new Object[]{"23", "Pemeriksaan Otopsi Klinik", "", "", "", ""});


}

private void tampilkanDataLab(String kode, String[] pemeriksaanList) {
    PreparedStatement ps = null;
    ResultSet rs = null;
    try {
        StringBuilder inClause = new StringBuilder();
        for (int i = 0; i < pemeriksaanList.length; i++) {
            if (i > 0) {
                inClause.append(",");
            }
            inClause.append("?");
        }

        ps = koneksi.prepareStatement(
            "SELECT template_laboratorium.Pemeriksaan, " +
            "SUM(CASE WHEN pasien.jk = 'L' THEN 1 ELSE 0 END) AS jumlah_laki, " +
            "SUM(CASE WHEN pasien.jk = 'P' THEN 1 ELSE 0 END) AS jumlah_perempuan, " +
            "ROUND(AVG(CASE " +
            "WHEN detail_periksa_lab.nilai REGEXP '^[0-9]+(\\\\.[0-9]+)?$' " +
            "AND pasien.jk = 'L' THEN CAST(detail_periksa_lab.nilai AS DECIMAL(10,2)) " +
            "ELSE NULL END), 2) AS rata_laki, " +
            "ROUND(AVG(CASE " +
            "WHEN detail_periksa_lab.nilai REGEXP '^[0-9]+(\\\\.[0-9]+)?$' " +
            "AND pasien.jk = 'P' THEN CAST(detail_periksa_lab.nilai AS DECIMAL(10,2)) " +
            "ELSE NULL END), 2) AS rata_perempuan " +
            "FROM template_laboratorium " +
            "INNER JOIN detail_periksa_lab ON template_laboratorium.id_template = detail_periksa_lab.id_template " +
            "INNER JOIN periksa_lab ON detail_periksa_lab.no_rawat = periksa_lab.no_rawat " +
            "LEFT JOIN reg_periksa ON detail_periksa_lab.no_rawat = reg_periksa.no_rawat " +
            "LEFT JOIN pasien ON reg_periksa.no_rkm_medis = pasien.no_rkm_medis " +
            "WHERE periksa_lab.tgl_periksa BETWEEN ? AND ? " +
            "AND template_laboratorium.Pemeriksaan IN (" + inClause.toString() + ") " +
            "GROUP BY template_laboratorium.Pemeriksaan " +
            "ORDER BY template_laboratorium.Pemeriksaan"
        );

        ps.setString(1, Valid.SetTgl(Tgl1.getSelectedItem() + ""));
        ps.setString(2, Valid.SetTgl(Tgl2.getSelectedItem() + ""));
        for (int i = 0; i < pemeriksaanList.length; i++) {
            ps.setString(i + 3, pemeriksaanList[i]);
        }

        rs = ps.executeQuery();
        int subNomor = 1; // Penomoran dalam loop
        while (rs.next()) {
            tabMode.addRow(new Object[]{
                kode + "." + (subNomor++), // Format sub-nomor
                rs.getString("Pemeriksaan"), // Nama pemeriksaan
                rs.getInt("jumlah_laki"), // Jumlah L
                rs.getInt("jumlah_perempuan"), // Jumlah P
                (rs.getDouble("rata_laki") == 0.0 ? "-" : String.valueOf(rs.getDouble("rata_laki"))), // Rata-rata L
                (rs.getDouble("rata_perempuan") == 0.0 ? "-" : String.valueOf(rs.getDouble("rata_perempuan"))) // Rata-rata P
            });
        }

    } catch (SQLException e) {
        System.out.println("Notif: " + e);
    }
}

    
}
