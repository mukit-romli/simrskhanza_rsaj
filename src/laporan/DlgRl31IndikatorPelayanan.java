/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * DlgLhtBiaya.java
 *
 * Created on 12 Jul 10, 16:21:34
 */
package laporan;

import fungsi.WarnaTable;
import fungsi.batasInput;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import fungsi.akses;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author perpustakaan
 */
public final class DlgRl31IndikatorPelayanan extends javax.swing.JDialog {

    private final DefaultTableModel tabMode;
    private Connection koneksi = koneksiDB.condb();
    private sekuel Sequel = new sekuel();
    private validasi Valid = new validasi();
    private PreparedStatement ps;
    private ResultSet rs;
    private int i = 0; 
            ;

    /**
     * Creates new form DlgLhtBiaya
     *
     * @param parent
     * @param modal
     */
    public DlgRl31IndikatorPelayanan(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocation(8, 1);
        setSize(885, 674);

        Object[] rowRwJlDr = {
            "No.","Jenis Pelayanan", "BOR", "ALOS", 
            "BTO", "TOI", "NDR", "GDR"
        };
        tabMode = new DefaultTableModel(null, rowRwJlDr) {
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };
        tbBangsal.setModel(tabMode);
        //tbBangsal.setDefaultRenderer(Object.class, new WarnaTable(jPanel2.getBackground(),tbBangsal.getBackground()));
        tbBangsal.setPreferredScrollableViewportSize(new Dimension(500, 500));
        tbBangsal.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (i = 0; i < 7; i++) {
            TableColumn column = tbBangsal.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(40);
            } else if (i == 1) {
                column.setPreferredWidth(150);
            } else if (i == 2) {
                column.setPreferredWidth(80);
            } else if (i == 3) {
                column.setPreferredWidth(80);
            } else if (i == 4) {
                column.setPreferredWidth(80);    
            } else if (i == 5) {
                column.setPreferredWidth(80);     
            } else if (i == 6) {
                column.setPreferredWidth(80);     
            } else if (i == 7) {
                column.setPreferredWidth(80);         
            }    
        }
        tbBangsal.setDefaultRenderer(Object.class, new WarnaTable());

        TCari.setDocument(new batasInput((byte) 100).getKata(TCari));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new widget.InternalFrame();
        Scroll = new widget.ScrollPane();
        tbBangsal = new widget.Table();
        panelGlass5 = new widget.panelisi();
        label11 = new widget.Label();
        Tgl1 = new widget.Tanggal();
        label18 = new widget.Label();
        Tgl2 = new widget.Tanggal();
        jLabel6 = new widget.Label();
        TCari = new widget.TextBox();
        BtnCari = new widget.Button();
        BtnAll = new widget.Button();
        jLabel7 = new widget.Label();
        BtnPrint = new widget.Button();
        BtnKeluar = new widget.Button();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 245, 235)), " ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(50, 50, 50))); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);

        tbBangsal.setName("tbBangsal"); // NOI18N
        Scroll.setViewportView(tbBangsal);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        panelGlass5.setName("panelGlass5"); // NOI18N
        panelGlass5.setPreferredSize(new java.awt.Dimension(55, 55));
        panelGlass5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        label11.setText("Tanggal :");
        label11.setName("label11"); // NOI18N
        label11.setPreferredSize(new java.awt.Dimension(50, 23));
        panelGlass5.add(label11);

        Tgl1.setDisplayFormat("dd-MM-yyyy");
        Tgl1.setName("Tgl1"); // NOI18N
        Tgl1.setPreferredSize(new java.awt.Dimension(90, 23));
        panelGlass5.add(Tgl1);

        label18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label18.setText("s.d.");
        label18.setName("label18"); // NOI18N
        label18.setPreferredSize(new java.awt.Dimension(25, 23));
        panelGlass5.add(label18);

        Tgl2.setDisplayFormat("dd-MM-yyyy");
        Tgl2.setName("Tgl2"); // NOI18N
        Tgl2.setPreferredSize(new java.awt.Dimension(90, 23));
        panelGlass5.add(Tgl2);

        jLabel6.setText("Key Word :");
        jLabel6.setName("jLabel6"); // NOI18N
        jLabel6.setPreferredSize(new java.awt.Dimension(60, 23));
        panelGlass5.add(jLabel6);

        TCari.setName("TCari"); // NOI18N
        TCari.setPreferredSize(new java.awt.Dimension(155, 23));
        TCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TCariKeyPressed(evt);
            }
        });
        panelGlass5.add(TCari);

        BtnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/accept.png"))); // NOI18N
        BtnCari.setMnemonic('2');
        BtnCari.setToolTipText("Alt+2");
        BtnCari.setName("BtnCari"); // NOI18N
        BtnCari.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariActionPerformed(evt);
            }
        });
        BtnCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnCariKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnCari);

        BtnAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Search-16x16.png"))); // NOI18N
        BtnAll.setMnemonic('M');
        BtnAll.setToolTipText("Alt+M");
        BtnAll.setName("BtnAll"); // NOI18N
        BtnAll.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAllActionPerformed(evt);
            }
        });
        BtnAll.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnAllKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnAll);

        jLabel7.setName("jLabel7"); // NOI18N
        jLabel7.setPreferredSize(new java.awt.Dimension(30, 23));
        panelGlass5.add(jLabel7);

        BtnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/b_print.png"))); // NOI18N
        BtnPrint.setMnemonic('T');
        BtnPrint.setText("Cetak");
        BtnPrint.setToolTipText("Alt+T");
        BtnPrint.setName("BtnPrint"); // NOI18N
        BtnPrint.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrintActionPerformed(evt);
            }
        });
        BtnPrint.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnPrintKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnPrint);

        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnKeluar);

        internalFrame1.add(panelGlass5, java.awt.BorderLayout.PAGE_END);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 50));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48x48/report24.png"))); // NOI18N
        jLabel1.setText("RL 3.1  Indikator Pelayanan ");
        jLabel1.setIconTextGap(10);
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel1.add(jLabel1);

        internalFrame1.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrintActionPerformed
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if (tabMode.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Maaf, data sudah habis. Tidak ada data yang bisa anda print...!!!!");
            //TCari.requestFocus();
        } else if (tabMode.getRowCount() != 0) {

            Map<String, Object> param = new HashMap<>();
            param.put("namars", akses.getnamars());
            param.put("alamatrs", akses.getalamatrs());
            param.put("kotars", akses.getkabupatenrs());
            param.put("propinsirs", akses.getpropinsirs());
            param.put("kontakrs", akses.getkontakrs());
            param.put("emailrs", akses.getemailrs());
            param.put("periode", Tgl1.getSelectedItem() + " s.d. " + Tgl2.getSelectedItem());
            param.put("tanggal", Tgl2.getDate());
            param.put("logo", Sequel.cariGambar("select setting.logo from setting"));
            Sequel.queryu("delete from temporary where temp37='" + akses.getalamatip() + "'");
            for (int r = 0; r < tabMode.getRowCount(); r++) {
                if (!tbBangsal.getValueAt(r, 0).toString().contains(">>")) {
                    Sequel.menyimpan("temporary", "'" + r + "','"
                            + tabMode.getValueAt(r, 0).toString() + "','"
                            + tabMode.getValueAt(r, 1).toString().replaceAll("'", "`") + "','"
                            + tabMode.getValueAt(r, 2).toString() + "','"
                            + tabMode.getValueAt(r, 3).toString() + "','"
                            + tabMode.getValueAt(r, 4).toString() + "','"
                            + tabMode.getValueAt(r, 5).toString() + "','"
                            + tabMode.getValueAt(r, 6).toString() + "','"
                            + tabMode.getValueAt(r, 7).toString() + "','"
                            + tabMode.getValueAt(r, 8).toString() + "','0','0','0','"
                            + tabMode.getValueAt(r, 9).toString() + "','"
                            + tabMode.getValueAt(r, 10).toString() + "','"
                            + tabMode.getValueAt(r, 11).toString() + "','"
                            + tabMode.getValueAt(r, 12).toString() + "','"                                                     
                            + tabMode.getValueAt(r, 13).toString() + "','','','','','','','','','','','','','','','','','','','','" + akses.getalamatip() + "'", "Rekap Nota Pembayaran");
                }
            }

            Valid.MyReportqry("rptRl310.jasper", "report", "::[ Formulir RL 3.10 ]::", "select * from temporary where temporary.temp37='" + akses.getalamatip() + "' order by temporary.no", param);
        }
        this.setCursor(Cursor.getDefaultCursor());
}//GEN-LAST:event_BtnPrintActionPerformed

    private void BtnPrintKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnPrintKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnPrintActionPerformed(null);
        } else {
            //Valid.pindah(evt, BtnHapus, BtnAll);
        }
}//GEN-LAST:event_BtnPrintKeyPressed

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        dispose();
}//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            dispose();
        } else {
            Valid.pindah(evt, BtnKeluar, TCari);
        }
}//GEN-LAST:event_BtnKeluarKeyPressed

private void BtnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariActionPerformed
    tampil();
}//GEN-LAST:event_BtnCariActionPerformed

private void BtnCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnCariKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        tampil();
        this.setCursor(Cursor.getDefaultCursor());
    } else {
        Valid.pindah(evt, TCari, BtnPrint);
    }
}//GEN-LAST:event_BtnCariKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        tampil();
    }//GEN-LAST:event_formWindowOpened

    private void TCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TCariKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            BtnCariActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_DOWN) {
            BtnCari.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_UP) {
            BtnKeluar.requestFocus();
        }
    }//GEN-LAST:event_TCariKeyPressed

    private void BtnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAllActionPerformed
        TCari.setText("");
        tampil();
    }//GEN-LAST:event_BtnAllActionPerformed

    private void BtnAllKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnAllKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnAllActionPerformed(null);
        } else {

        }
    }//GEN-LAST:event_BtnAllKeyPressed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        tampil();

    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgRl31IndikatorPelayanan dialog = new DlgRl31IndikatorPelayanan(new javax.swing.JFrame(), true);           
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnAll;
    private widget.Button BtnCari;
    private widget.Button BtnKeluar;
    private widget.Button BtnPrint;
    private widget.ScrollPane Scroll;
    private widget.TextBox TCari;
    private widget.Tanggal Tgl1;
    private widget.Tanggal Tgl2;
    private widget.InternalFrame internalFrame1;
    private javax.swing.JLabel jLabel1;
    private widget.Label jLabel6;
    private widget.Label jLabel7;
    private javax.swing.JPanel jPanel1;
    private widget.Label label11;
    private widget.Label label18;
    private widget.panelisi panelGlass5;
    private widget.Table tbBangsal;
    // End of variables declaration//GEN-END:variables

//private void tampil() {
//     Valid.tabelKosong(tabMode);
//    
//    try {
//    
//            String tgl1 = Valid.SetTgl(Tgl1.getSelectedItem().toString());
//            String tgl2 = Valid.SetTgl(Tgl2.getSelectedItem().toString());
//
//            // Ambil total tempat tidur
//            int totalTempatTidur = getTotalTempatTidur();
//
//            // Ambil total hari perawatan
//            int totalHariPerawatan = getTotalHariPerawatan(tgl1, tgl2);
//
//            // Ambil jumlah pasien keluar hidup
//            int jumlahPasienKeluarHidup = getjumlahPasienKeluarHidup(tgl1, tgl2);
//
//            // Ambil jumlah pasien keluar meninggal
//            int jumlahPasienKeluarMeninggal = getjumlahPasienKeluarMeninggal(tgl1, tgl2);
//
//            // Hitung BOR (Bed Occupancy Rate)
//            double BOR = totalTempatTidur > 0 ? (double) totalHariPerawatan / (totalTempatTidur * getJumlahHariDalamPeriode(tgl1, tgl2)) * 100 : 0;
//
//            // Hitung ALOS (Average Length of Stay)
//            double ALOS = jumlahPasienKeluarHidup + jumlahPasienKeluarMeninggal > 0 ? (double) totalHariPerawatan / (jumlahPasienKeluarHidup + jumlahPasienKeluarMeninggal) : 0;
//
//            // Hitung BTO (Bed Turn Over)
//            double BTO = totalTempatTidur > 0 ? (double) (jumlahPasienKeluarHidup + jumlahPasienKeluarMeninggal) / totalTempatTidur : 0;
//
//            // Hitung TOI (Turn Over Interval)
//            double TOI = totalTempatTidur > 0 ? (double) (totalTempatTidur * getJumlahHariDalamPeriode(tgl1, tgl2) - totalHariPerawatan) / (jumlahPasienKeluarHidup + jumlahPasienKeluarMeninggal) : 0;
//
//            // Hitung NDR (Net Death Rate)
//            double totalPasienKeluar = jumlahPasienKeluarHidup + jumlahPasienKeluarMeninggal;
//            double pasienMeninggalDiAtas48Jam = jumlahPasienKeluarMeninggal - getJumlahPasienMeninggalDiBawah48Jam(tgl1, tgl2);
//
//            double NDR = totalPasienKeluar > 0 ? (pasienMeninggalDiAtas48Jam / totalPasienKeluar) * 1000 : 0;
//
//            // Hitung GDR (Gross Death Rate)
//            double GDR = jumlahPasienKeluarHidup + jumlahPasienKeluarMeninggal > 0 ? (double) jumlahPasienKeluarMeninggal / (jumlahPasienKeluarHidup + jumlahPasienKeluarMeninggal) * 1000 : 0;
//
//            // Tampilkan hasil
//            System.out.println("Total Tempat Tidur: " + totalTempatTidur);
//            System.out.println("Total Hari Perawatan: " + totalHariPerawatan);
//            System.out.println("BOR: " + BOR + "%");
//            System.out.println("ALOS: " + ALOS);
//            System.out.println("BTO: " + BTO);
//            System.out.println("TOI: " + TOI);
//            System.out.println("NDR: " + NDR);
//            System.out.println("GDR: " + GDR);
//             
//            // Format tanggal input
//            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
//            SimpleDateFormat sdfBulanTahun = new SimpleDateFormat("MMMM yyyy");
//            SimpleDateFormat sdfTahun = new SimpleDateFormat("yyyy");
//
//            // Contoh input tanggal dari combo box
//            String tgl1Str = Tgl1.getSelectedItem().toString();
//            String tgl2Str = Tgl2.getSelectedItem().toString();
//
//            // Parsing ke Date
//            Date tglMulai = sdf.parse(tgl1Str);
//            Date tglAkhir = sdf.parse(tgl2Str);
//
//            // Ambil bulan dan tahun
//            Calendar calMulai = Calendar.getInstance();
//            Calendar calAkhir = Calendar.getInstance();
//            calMulai.setTime(tglMulai);
//            calAkhir.setTime(tglAkhir);
//
//            String jenisPelayanan;
//
//            if (calMulai.get(Calendar.MONTH) == calAkhir.get(Calendar.MONTH)) {
//                // Jika bulan sama, tampilkan "MMMM yyyy"
//                jenisPelayanan = sdfBulanTahun.format(tglMulai);
//            } else {
//                // Jika bulan berbeda, tampilkan "yyyy"
//                jenisPelayanan = sdfTahun.format(tglMulai);
//            }
//
//            // Tambahkan ke tabel
//            tabMode.addRow(new Object[]{
//                "1.",
//                jenisPelayanan,
//                Valid.SetAngka(BOR) + " %",
//                Valid.SetAngka(ALOS) + " Hari",
//                Valid.SetAngka(BTO) + " Hari",
//                Valid.SetAngka(TOI) + " Hari",
//                Valid.SetAngka(NDR) + " %",
//                Valid.SetAngka(GDR) + " %"
//            });
//
//        } catch (Exception e) {
//            System.out.println("Error tampil RL3.1: " + e);
//    }
//}

private void tampil() {
    Valid.tabelKosong(tabMode);

    try {
        String tgl1 = Valid.SetTgl(Tgl1.getSelectedItem().toString());
        String tgl2 = Valid.SetTgl(Tgl2.getSelectedItem().toString());

        int totalTempatTidur = getTotalTempatTidur();
        int totalHariPerawatan = getTotalHariPerawatan(tgl1, tgl2);
        int jumlahPasienKeluarHidup = getjumlahPasienKeluarHidup(tgl1, tgl2);
        int jumlahPasienKeluarMeninggal = getjumlahPasienKeluarMeninggal(tgl1, tgl2);

        double BOR = totalTempatTidur > 0 ? (double) totalHariPerawatan / (totalTempatTidur * getJumlahHariDalamPeriode(tgl1, tgl2)) * 100 : 0;
        double ALOS = jumlahPasienKeluarHidup + jumlahPasienKeluarMeninggal > 0 ? (double) totalHariPerawatan / (jumlahPasienKeluarHidup + jumlahPasienKeluarMeninggal) : 0;
        double BTO = totalTempatTidur > 0 ? (double) (jumlahPasienKeluarHidup + jumlahPasienKeluarMeninggal) / totalTempatTidur : 0;
        double TOI = totalTempatTidur > 0 ? (double) (totalTempatTidur * getJumlahHariDalamPeriode(tgl1, tgl2) - totalHariPerawatan) / (jumlahPasienKeluarHidup + jumlahPasienKeluarMeninggal) : 0;

        double totalPasienKeluar = jumlahPasienKeluarHidup + jumlahPasienKeluarMeninggal;
        double pasienMeninggalDiAtas48Jam = jumlahPasienKeluarMeninggal - getJumlahPasienMeninggalDiBawah48Jam(tgl1, tgl2);
        double NDR = totalPasienKeluar > 0 ? (pasienMeninggalDiAtas48Jam / totalPasienKeluar) * 1000 : 0;
        double GDR = totalPasienKeluar > 0 ? (double) jumlahPasienKeluarMeninggal / totalPasienKeluar * 1000 : 0;

        // Gunakan DateTimeFormatter untuk parsing tanggal
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        DateTimeFormatter formatterBulanTahun = DateTimeFormatter.ofPattern("MMMM yyyy");
        DateTimeFormatter formatterTahun = DateTimeFormatter.ofPattern("yyyy");

        LocalDate tglMulai = LocalDate.parse(tgl1, formatter);
        LocalDate tglAkhir = LocalDate.parse(tgl2, formatter);

        String jenisPelayanan;
        if (tglMulai.getMonth() == tglAkhir.getMonth()) {
            jenisPelayanan = tglMulai.format(formatterBulanTahun);
        } else {
            jenisPelayanan = tglMulai.format(formatterTahun);
        }

        tabMode.addRow(new Object[]{
            "1.",
            jenisPelayanan,
            Valid.SetAngka(BOR) + " %",
            Valid.SetAngka(ALOS) + " Hari",
            Valid.SetAngka(BTO) + " Hari",
            Valid.SetAngka(TOI) + " Hari",
            Valid.SetAngka(NDR) + " %",
            Valid.SetAngka(GDR) + " %"
        });

    } catch (Exception e) {
        System.out.println("Error tampil RL3.1: " + e);
    }
}    
    
//private int getTotalTempatTidur() {
//    int total = 0;
//    try {
//        PreparedStatement ps = koneksi.prepareStatement(
//            "SELECT COUNT(*) AS total FROM kamar WHERE statusdata = '1'");
//        ResultSet rs = ps.executeQuery();
//        if (rs.next()) {
//            total = rs.getInt("total");
//        }
//        rs.close();
//        ps.close();
//    } catch (SQLException e) {
//        System.out.println("Error getTotalTempatTidur: " + e);
//    }
//    return total;
//}

private int getTotalTempatTidur() {
    int total = 0;
    String query = "SELECT COUNT(*) AS total FROM kamar WHERE statusdata = '1'";
    
    try (PreparedStatement ps = koneksi.prepareStatement(query);
         ResultSet rs = ps.executeQuery()) {
        if (rs.next()) {
            total = rs.getInt("total");
        }
    } catch (SQLException e) {
        System.out.println("Error getTotalTempatTidur: " + e);
    }
    
    return total;
}

//private int getTotalHariPerawatan(String tgl1, String tgl2) {
//    int total = 0;
//    try {
//        PreparedStatement ps = koneksi.prepareStatement(
//            "SELECT SUM(DATEDIFF(LEAST(IFNULL(kamar_inap.tgl_keluar, ?), ?), " +
//            "GREATEST(kamar_inap.tgl_masuk, ?))) AS total " +
//            "FROM kamar_inap " +
//            "JOIN kamar ON kamar_inap.kd_kamar = kamar.kd_kamar " +
//            "WHERE kamar.statusdata = '1' " +
//            "AND kamar_inap.tgl_masuk <= ? " +
//            "AND (kamar_inap.tgl_keluar IS NULL OR kamar_inap.tgl_keluar >= ?)");
//        
//        ps.setString(1, tgl2);
//        ps.setString(2, tgl2);
//        ps.setString(3, tgl1);
//        ps.setString(4, tgl2);
//        ps.setString(5, tgl1);
//        
//        ResultSet rs = ps.executeQuery();
//        if (rs.next()) {
//            total = rs.getInt("total");
//        }
//        rs.close();
//        ps.close();
//    } catch (SQLException e) {
//        System.out.println("Error getTotalHariPerawatan: " + e);
//    }
//    return total;
//}

private int getTotalHariPerawatan(String tgl1, String tgl2) {
    int total = 0;
    String query = "SELECT SUM(DATEDIFF(LEAST(IFNULL(kamar_inap.tgl_keluar, ?), ?), " +
                   "GREATEST(kamar_inap.tgl_masuk, ?))) AS total " +
                   "FROM kamar_inap " +
                   "JOIN kamar ON kamar_inap.kd_kamar = kamar.kd_kamar " +
                   "WHERE kamar.statusdata = '1' " +
                   "AND kamar_inap.tgl_masuk <= ? " +
                   "AND (kamar_inap.tgl_keluar IS NULL OR kamar_inap.tgl_keluar >= ?)";

    try (PreparedStatement ps = koneksi.prepareStatement(query)) {
        ps.setString(1, tgl2);
        ps.setString(2, tgl2);
        ps.setString(3, tgl1);
        ps.setString(4, tgl2);
        ps.setString(5, tgl1);
        
        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                total = rs.getInt("total");
            }
        }
    } catch (SQLException e) {
        System.out.println("Error getTotalHariPerawatan: " + e);
    }
    
    return total;
}


private int getJumlahPasienMeninggalDiBawah48Jam(String tgl1, String tgl2) {
    int total = 0;
    try {
        PreparedStatement ps = koneksi.prepareStatement(
            "SELECT COUNT(*) AS total FROM kamar_inap " +
            "WHERE CONCAT(tgl_keluar, ' ', jam_keluar) BETWEEN ? AND ? " +  // Memeriksa tgl_keluar + jam_keluar
            "AND stts_pulang LIKE '%meninggal%' " +
            "AND TIMESTAMPDIFF(HOUR, CONCAT(tgl_masuk, ' ', jam_masuk), CONCAT(tgl_keluar, ' ', jam_keluar)) < 48");

        ps.setString(1, tgl1 + " 00:00:00");
        ps.setString(2, tgl2 + " 23:59:59");

        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            total = rs.getInt("total");
        }
        rs.close();
        ps.close();
    } catch (SQLException e) {
        System.out.println("Error getJumlahPasienMeninggalDiBawah48Jam: " + e);
    }
    return total;
}

private int getJumlahHariDalamPeriode(String tgl1, String tgl2) {
    return (int) ChronoUnit.DAYS.between(LocalDate.parse(tgl1), LocalDate.parse(tgl2)) + 1;
}

private int getjumlahPasienKeluarHidupMati(String tgl1, String tgl2) {
    int getjumlahPasienKeluarHidupMati = 0;
    try {
        String query = "SELECT COUNT(*) FROM kamar_inap WHERE tgl_keluar BETWEEN ? AND ? AND stts_pulang NOT IN ('pindah kamar', '-')";
        
        PreparedStatement ps = koneksi.prepareStatement(query);
        ps.setString(1, tgl1);
        ps.setString(2, tgl2);        
        
        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            getjumlahPasienKeluarHidupMati = rs.getInt(1);
        }
        
        rs.close();
        ps.close();
    } catch (SQLException e) {
        System.out.println("Error getjumlahPasienKeluarHidupMati: " + e.getMessage());
    }
    return getjumlahPasienKeluarHidupMati;
}

private int getjumlahPasienKeluarHidup(String tgl1, String tgl2) {
    int jumlahKeluarHidup = 0;
    try {
        String query = "SELECT COUNT(*) FROM kamar_inap WHERE tgl_keluar BETWEEN ? AND ? AND stts_pulang NOT IN ('pindah kamar', '-','Meninggal')";
        
        PreparedStatement ps = koneksi.prepareStatement(query);
        ps.setString(1, tgl1);
        ps.setString(2, tgl2);        
        
        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            jumlahKeluarHidup = rs.getInt(1);
        }
        
        rs.close();
        ps.close();
    } catch (SQLException e) {
        System.out.println("Error getJumlahPasienKeluarHidup: " + e.getMessage());
    }
    return jumlahKeluarHidup;
}

private int getjumlahPasienKeluarMeninggal(String tgl1, String tgl2) {
    int jumlahKeluarMeninggal = 0;
    try {
        String query = "SELECT COUNT(*) FROM kamar_inap WHERE tgl_keluar BETWEEN ? AND ? AND stts_pulang IN ('Meninggal')";
        
        PreparedStatement ps = koneksi.prepareStatement(query);
        ps.setString(1, tgl1);
        ps.setString(2, tgl2);        
        
        ResultSet rs = ps.executeQuery();
        if (rs.next()) {
            jumlahKeluarMeninggal = rs.getInt(1);
        }
        
        rs.close();
        ps.close();
    } catch (SQLException e) {
        System.out.println("Error getJumlahPasienKeluarMeninggal: " + e.getMessage());
    }
    return jumlahKeluarMeninggal;
}

}
