/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * DlgLhtBiaya.java
 *
 * Created on 12 Jul 10, 16:21:34
 */
package laporan;

import fungsi.WarnaTable;
import fungsi.batasInput;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import fungsi.akses;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author perpustakaan
 */
public final class DlgRl32RawatInap extends javax.swing.JDialog {

    private final DefaultTableModel tabMode;
    private Connection koneksi = koneksiDB.condb();
    private sekuel Sequel = new sekuel();
    private validasi Valid = new validasi();
    private PreparedStatement ps;
    private ResultSet rs;
    private int i = 0; 
            

    /**
     * Creates new form DlgLhtBiaya
     *
     * @param parent
     * @param modal
     */
    public DlgRl32RawatInap(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocation(8, 1);
        setSize(885, 674);

        Object[] rowRwJlDr = {
            "No.", "Jenis Pelayanan", "Pasien Awal Bulan", "Pasien Masuk",
            "Pasien Pindahan", "Pasien Dipindahkan", "Pasien Keluar Hidup",
            "Pria < 48 jam", "Pria >= 48 jam", "Wanita < 48 jam", "Wanita >= 48 jam",
            "Jumlah Lama Dirawat", "Pasien Akhir Bulan", "Jumlah Hari Perawatan",
            "VVIP", "VIP", "Kelas 1", "Kelas 2", "Kelas 3", "Khusus", 
            "Alokasi TT Awal Bulan"
        };
        tabMode = new DefaultTableModel(null, rowRwJlDr) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Semua sel tidak bisa diedit
            }
        };
        tbBangsal.setModel(tabMode);
        //tbBangsal.setDefaultRenderer(Object.class, new WarnaTable(jPanel2.getBackground(),tbBangsal.getBackground()));
        tbBangsal.setPreferredScrollableViewportSize(new Dimension(500, 500));
        tbBangsal.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        // Mengatur lebar kolom biar rapi
        int[] columnWidths = {40, 150, 100, 100, 100, 100, 120, 
                              90, 90, 90, 90, 120, 120, 120, 
                              60, 60, 60, 60, 60, 60, 100};

        for (int i = 0; i < columnWidths.length; i++) {
            tbBangsal.getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
        }
        tbBangsal.setDefaultRenderer(Object.class, new WarnaTable());

        TCari.setDocument(new batasInput((byte) 100).getKata(TCari));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new widget.InternalFrame();
        Scroll = new widget.ScrollPane();
        tbBangsal = new widget.Table();
        panelGlass5 = new widget.panelisi();
        label11 = new widget.Label();
        Tgl1 = new widget.Tanggal();
        label18 = new widget.Label();
        Tgl2 = new widget.Tanggal();
        jLabel6 = new widget.Label();
        TCari = new widget.TextBox();
        BtnCari = new widget.Button();
        BtnAll = new widget.Button();
        jLabel7 = new widget.Label();
        BtnPrint = new widget.Button();
        BtnKeluar = new widget.Button();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 245, 235)), " ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(50, 50, 50))); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);

        tbBangsal.setName("tbBangsal"); // NOI18N
        Scroll.setViewportView(tbBangsal);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        panelGlass5.setName("panelGlass5"); // NOI18N
        panelGlass5.setPreferredSize(new java.awt.Dimension(55, 55));
        panelGlass5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        label11.setText("Tanggal :");
        label11.setName("label11"); // NOI18N
        label11.setPreferredSize(new java.awt.Dimension(50, 23));
        panelGlass5.add(label11);

        Tgl1.setDisplayFormat("dd-MM-yyyy");
        Tgl1.setName("Tgl1"); // NOI18N
        Tgl1.setPreferredSize(new java.awt.Dimension(90, 23));
        panelGlass5.add(Tgl1);

        label18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label18.setText("s.d.");
        label18.setName("label18"); // NOI18N
        label18.setPreferredSize(new java.awt.Dimension(25, 23));
        panelGlass5.add(label18);

        Tgl2.setDisplayFormat("dd-MM-yyyy");
        Tgl2.setName("Tgl2"); // NOI18N
        Tgl2.setPreferredSize(new java.awt.Dimension(90, 23));
        panelGlass5.add(Tgl2);

        jLabel6.setText("Key Word :");
        jLabel6.setName("jLabel6"); // NOI18N
        jLabel6.setPreferredSize(new java.awt.Dimension(60, 23));
        panelGlass5.add(jLabel6);

        TCari.setName("TCari"); // NOI18N
        TCari.setPreferredSize(new java.awt.Dimension(155, 23));
        TCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TCariKeyPressed(evt);
            }
        });
        panelGlass5.add(TCari);

        BtnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/accept.png"))); // NOI18N
        BtnCari.setMnemonic('2');
        BtnCari.setToolTipText("Alt+2");
        BtnCari.setName("BtnCari"); // NOI18N
        BtnCari.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariActionPerformed(evt);
            }
        });
        BtnCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnCariKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnCari);

        BtnAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Search-16x16.png"))); // NOI18N
        BtnAll.setMnemonic('M');
        BtnAll.setToolTipText("Alt+M");
        BtnAll.setName("BtnAll"); // NOI18N
        BtnAll.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAllActionPerformed(evt);
            }
        });
        BtnAll.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnAllKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnAll);

        jLabel7.setName("jLabel7"); // NOI18N
        jLabel7.setPreferredSize(new java.awt.Dimension(30, 23));
        panelGlass5.add(jLabel7);

        BtnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/b_print.png"))); // NOI18N
        BtnPrint.setMnemonic('T');
        BtnPrint.setText("Cetak");
        BtnPrint.setToolTipText("Alt+T");
        BtnPrint.setName("BtnPrint"); // NOI18N
        BtnPrint.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrintActionPerformed(evt);
            }
        });
        BtnPrint.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnPrintKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnPrint);

        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnKeluar);

        internalFrame1.add(panelGlass5, java.awt.BorderLayout.PAGE_END);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 50));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/48x48/report24.png"))); // NOI18N
        jLabel1.setText("RL 3.2  Rawat Inap");
        jLabel1.setIconTextGap(10);
        jLabel1.setName("jLabel1"); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(330, 25));
        jPanel1.add(jLabel1);

        internalFrame1.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrintActionPerformed
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if (tabMode.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Maaf, data sudah habis. Tidak ada data yang bisa anda print...!!!!");
            //TCari.requestFocus();
        } else if (tabMode.getRowCount() != 0) {

            Map<String, Object> param = new HashMap<>();
            param.put("namars", akses.getnamars());
            param.put("alamatrs", akses.getalamatrs());
            param.put("kotars", akses.getkabupatenrs());
            param.put("propinsirs", akses.getpropinsirs());
            param.put("kontakrs", akses.getkontakrs());
            param.put("emailrs", akses.getemailrs());
            param.put("periode", Tgl1.getSelectedItem() + " s.d. " + Tgl2.getSelectedItem());
            param.put("tanggal", Tgl2.getDate());
            param.put("logo", Sequel.cariGambar("select setting.logo from setting"));
            Sequel.queryu("delete from temporary where temp37='" + akses.getalamatip() + "'");
            for (int r = 0; r < tabMode.getRowCount(); r++) {
                if (!tbBangsal.getValueAt(r, 0).toString().contains(">>")) {
                    Sequel.menyimpan("temporary", "'" + r + "','"
                            + tabMode.getValueAt(r, 0).toString() + "','"
                            + tabMode.getValueAt(r, 1).toString().replaceAll("'", "`") + "','"
                            + tabMode.getValueAt(r, 2).toString() + "','"
                            + tabMode.getValueAt(r, 3).toString() + "','"
                            + tabMode.getValueAt(r, 4).toString() + "','"
                            + tabMode.getValueAt(r, 5).toString() + "','"
                            + tabMode.getValueAt(r, 6).toString() + "','"
                            + tabMode.getValueAt(r, 7).toString() + "','"
                            + tabMode.getValueAt(r, 8).toString() + "','0','0','0','"
                            + tabMode.getValueAt(r, 9).toString() + "','"
                            + tabMode.getValueAt(r, 10).toString() + "','"
                            + tabMode.getValueAt(r, 11).toString() + "','"
                            + tabMode.getValueAt(r, 12).toString() + "','"                                                     
                            + tabMode.getValueAt(r, 13).toString() + "','','','','','','','','','','','','','','','','','','','','" + akses.getalamatip() + "'", "Rekap Nota Pembayaran");
                }
            }

            Valid.MyReportqry("rptRl310.jasper", "report", "::[ Formulir RL 3.10 ]::", "select * from temporary where temporary.temp37='" + akses.getalamatip() + "' order by temporary.no", param);
        }
        this.setCursor(Cursor.getDefaultCursor());
}//GEN-LAST:event_BtnPrintActionPerformed

    private void BtnPrintKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnPrintKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnPrintActionPerformed(null);
        } else {
            //Valid.pindah(evt, BtnHapus, BtnAll);
        }
}//GEN-LAST:event_BtnPrintKeyPressed

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        dispose();
}//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            dispose();
        } else {
            Valid.pindah(evt, BtnKeluar, TCari);
        }
}//GEN-LAST:event_BtnKeluarKeyPressed

private void BtnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariActionPerformed
    tampil();
}//GEN-LAST:event_BtnCariActionPerformed

private void BtnCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnCariKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        tampil();
        this.setCursor(Cursor.getDefaultCursor());
    } else {
        Valid.pindah(evt, TCari, BtnPrint);
    }
}//GEN-LAST:event_BtnCariKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        tampil();
    }//GEN-LAST:event_formWindowOpened

    private void TCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TCariKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            BtnCariActionPerformed(null);
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_DOWN) {
            BtnCari.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_UP) {
            BtnKeluar.requestFocus();
        }
    }//GEN-LAST:event_TCariKeyPressed

    private void BtnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAllActionPerformed
        TCari.setText("");
        tampil();
    }//GEN-LAST:event_BtnAllActionPerformed

    private void BtnAllKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnAllKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnAllActionPerformed(null);
        } else {

        }
    }//GEN-LAST:event_BtnAllKeyPressed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        tampil();

    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgRl32RawatInap dialog = new DlgRl32RawatInap(new javax.swing.JFrame(), true);           
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnAll;
    private widget.Button BtnCari;
    private widget.Button BtnKeluar;
    private widget.Button BtnPrint;
    private widget.ScrollPane Scroll;
    private widget.TextBox TCari;
    private widget.Tanggal Tgl1;
    private widget.Tanggal Tgl2;
    private widget.InternalFrame internalFrame1;
    private javax.swing.JLabel jLabel1;
    private widget.Label jLabel6;
    private widget.Label jLabel7;
    private javax.swing.JPanel jPanel1;
    private widget.Label label11;
    private widget.Label label18;
    private widget.panelisi panelGlass5;
    private widget.Table tbBangsal;
    // End of variables declaration//GEN-END:variables

//private void tampil() {
//    Valid.tabelKosong(tabMode);
//
//    try {
//        // Inisialisasi variabel untuk setiap kolom
//        int pasienAwalBulan = 0;
//        int pasienMasuk = 0;
//        int pasienPindahan = 0;
//        int pasienDipindahkan = 0;
//        int pasienKeluarHidup = 0;
//        int pasienKeluarMatiLK48 = 0;
//        int pasienKeluarMatiLK48Plus = 0;
//        int pasienKeluarMatiPR48 = 0;
//        int pasienKeluarMatiPR48Plus = 0;
//        int jumlahLamaDirawat = 0;
//        int pasienAkhirBulan = 0;
//        int jumlahHariPerawatan = 0;
//        int hariPerawatanVVIP = 0;
//        int hariPerawatanVIP = 0;
//        int hariPerawatanKelas1 = 0;
//        int hariPerawatanKelas2 = 0;
//        int hariPerawatanKelas3 = 0;
//        int hariPerawatanKelasKhusus = 0;
//        int alokasiTempatTidurAwal = 0;
//
//        String sql;
//        PreparedStatement ps;
//        ResultSet rs;
//
//        // Kolom 1: Pasien Awal Bulan
//        sql = "SELECT COUNT(*) AS pasien_awal_bulan FROM kamar_inap " +
//              "WHERE tgl_masuk <= ? AND (tgl_keluar IS NULL OR tgl_keluar >= ?) ";
////              "GROUP BY no_rawat";
//        
//        ps = koneksi.prepareStatement(sql);
//        ps.setString(1, Valid.SetTgl(Tgl1.getSelectedItem() + ""));
//        ps.setString(2, Valid.SetTgl(Tgl1.getSelectedItem() + ""));
//        rs = ps.executeQuery();
//        
//        while (rs.next()) {
//            pasienAwalBulan = rs.getInt("pasien_awal_bulan");
//        }
//        rs.close();
//        ps.close();
//
//        
//        // Kolom 2: Pasien Masuk
//        sql = "SELECT COUNT(*) AS pasien_masuk FROM kamar_inap " +
//              "WHERE tgl_masuk BETWEEN ? AND ? ";
////              "GROUP BY no_rawat";
//        
//        ps = koneksi.prepareStatement(sql);
//        ps.setString(1, Valid.SetTgl(Tgl1.getSelectedItem() + ""));
//        ps.setString(2, Valid.SetTgl(Tgl2.getSelectedItem() + ""));
//        rs = ps.executeQuery();
//        while (rs.next()) {
//            pasienMasuk = rs.getInt("pasien_masuk");
//        }
//        rs.close();
//        ps.close();
//        
//        
//        // Kolom 3: Pasien Pindahan
//        sql = "SELECT COUNT(*) AS jumlah_pasien_pindah FROM transfer_pasien_antar_ruang " +
//              "WHERE ruang_selanjutnya IS NOT NULL AND ruang_selanjutnya <> '' " +
//              "AND tanggal_pindah BETWEEN ? AND ?";
//        
//        ps = koneksi.prepareStatement(sql);
//        ps.setString(1, Valid.SetTgl(Tgl1.getSelectedItem() + ""));
//        ps.setString(2, Valid.SetTgl(Tgl2.getSelectedItem() + ""));
//        rs = ps.executeQuery();
//        while (rs.next()) {
//            pasienPindahan = rs.getInt("jumlah_pasien_pindah");
//        }
//        rs.close();
//        ps.close();
//
//        
//        // Kolom 4: Pasien Dipindahkan
//        sql = "SELECT COUNT(*) AS jumlah_pasien_dipindahkan FROM transfer_pasien_antar_ruang " +
//              "WHERE asal_ruang IS NOT NULL AND asal_ruang <> '' " +
//              "AND tanggal_masuk BETWEEN ? AND ?";
//        
//        ps = koneksi.prepareStatement(sql);
//        ps.setString(1, Valid.SetTgl(Tgl1.getSelectedItem() + ""));
//        ps.setString(2, Valid.SetTgl(Tgl2.getSelectedItem() + ""));
//        rs = ps.executeQuery();
//        while (rs.next()) {
//            pasienDipindahkan = rs.getInt("jumlah_pasien_dipindahkan");
//        }
//        rs.close();
//        ps.close();
//
//
//        // Kolom 5: Pasien Keluar Hidup
//        sql = "SELECT COUNT(*) AS pasien_keluar_hidup FROM kamar_inap " +
//              "WHERE tgl_keluar BETWEEN ? AND ? " +
//              "AND stts_pulang NOT IN ('pindah kamar', '-', 'Meninggal')";
//        ps = koneksi.prepareStatement(sql);
//        ps.setString(1, Valid.SetTgl(Tgl1.getSelectedItem() + ""));
//        ps.setString(2, Valid.SetTgl(Tgl2.getSelectedItem() + ""));
//        rs = ps.executeQuery();
//        while (rs.next()) {
//            pasienKeluarHidup = rs.getInt("pasien_keluar_hidup");
//        }
//        rs.close();
//        ps.close();
//
//        
//        // Kolom 6-9: Pasien Keluar Meninggal (<48 jam dan ≥48 jam) dengan jam masuk & keluar
//        sql = "SELECT " +
//              "COUNT(CASE WHEN pasien.jk = 'L' AND TIMESTAMPDIFF(HOUR, CONCAT(ki.tgl_masuk, ' ', ki.jam_masuk), CONCAT(ki.tgl_keluar, ' ', ki.jam_keluar)) < 48 THEN rp.no_rawat END) AS meninggal_lk_48, " +
//              "COUNT(CASE WHEN pasien.jk = 'L' AND TIMESTAMPDIFF(HOUR, CONCAT(ki.tgl_masuk, ' ', ki.jam_masuk), CONCAT(ki.tgl_keluar, ' ', ki.jam_keluar)) >= 48 THEN rp.no_rawat END) AS meninggal_lk_lebih_48, " +
//              "COUNT(CASE WHEN pasien.jk = 'P' AND TIMESTAMPDIFF(HOUR, CONCAT(ki.tgl_masuk, ' ', ki.jam_masuk), CONCAT(ki.tgl_keluar, ' ', ki.jam_keluar)) < 48 THEN rp.no_rawat END) AS meninggal_pr_48, " +
//              "COUNT(CASE WHEN pasien.jk = 'P' AND TIMESTAMPDIFF(HOUR, CONCAT(ki.tgl_masuk, ' ', ki.jam_masuk), CONCAT(ki.tgl_keluar, ' ', ki.jam_keluar)) >= 48 THEN rp.no_rawat END) AS meninggal_pr_lebih_48 " +
//              "FROM reg_periksa rp " +
//              "INNER JOIN kamar_inap ki ON rp.no_rawat = ki.no_rawat " +
//              "INNER JOIN pasien ON rp.no_rkm_medis = pasien.no_rkm_medis " +
//              "WHERE CONCAT(ki.tgl_keluar, ' ', ki.jam_keluar) BETWEEN ? AND ? " +
//              "AND ki.stts_pulang = 'Meninggal' AND rp.status_lanjut='Ranap'";
//        ps = koneksi.prepareStatement(sql);
//        ps.setString(1, Valid.SetTgl(Tgl1.getSelectedItem() + " 00:00:00"));
//        ps.setString(2, Valid.SetTgl(Tgl2.getSelectedItem() + " 23:59:59"));
//        rs = ps.executeQuery();
//        while (rs.next()) {
//            pasienKeluarMatiLK48 = rs.getInt("meninggal_lk_48");
//            pasienKeluarMatiLK48Plus = rs.getInt("meninggal_lk_lebih_48");
//            pasienKeluarMatiPR48 = rs.getInt("meninggal_pr_48");
//            pasienKeluarMatiPR48Plus = rs.getInt("meninggal_pr_lebih_48");
//        }
//        rs.close();
//        ps.close();
//
//
//        // Kolom 10: Jumlah Lama Dirawat
//        sql = "SELECT COUNT(*), " +
//              "IFNULL( " +
//              "    SUM( " +
//              "        CASE " +       
//              "            WHEN ki.stts_pulang NOT IN ('Pindah Kamar', '-') AND ki.tgl_keluar IS NOT NULL THEN " +
//              "                GREATEST(DATEDIFF(LEAST(ki.tgl_keluar, ?), GREATEST(ki.tgl_masuk, ?)), 1) " + 
//              "            WHEN ki.tgl_keluar IS NULL THEN " +
//              "                DATEDIFF(CURDATE(), GREATEST(ki.tgl_masuk, ?)) " +  
//              "            ELSE 0 " +
//              "        END " +
//              "    ), 0 " +
//              ") AS jumlah_lama_dirawat " +
//              "FROM kamar_inap ki " +
//              "LEFT JOIN reg_periksa rp ON rp.no_rawat = ki.no_rawat " +
//              "WHERE (ki.tgl_masuk <= ? AND (ki.tgl_keluar >= ? OR ki.tgl_keluar IS NULL)) ";
////              "GROUP BY rp.kd_pj";
//        
//        ps = koneksi.prepareStatement(sql);
//        ps.setString(1, Valid.SetTgl(Tgl2.getSelectedItem() + "")); // Batas akhir perhitungan
//        ps.setString(2, Valid.SetTgl(Tgl1.getSelectedItem() + "")); // Batas awal perhitungan
//        ps.setString(3, Valid.SetTgl(Tgl1.getSelectedItem() + "")); // Untuk pasien yang masih dirawat
//        ps.setString(4, Valid.SetTgl(Tgl2.getSelectedItem() + "")); // Validasi tgl masuk sebelum akhir periode
//        ps.setString(5, Valid.SetTgl(Tgl1.getSelectedItem() + "")); // Validasi tgl keluar setelah awal periode
//        rs = ps.executeQuery();
//        while (rs.next()) {
//            jumlahLamaDirawat = rs.getInt("jumlah_lama_dirawat");
//        }
//        rs.close();
//        ps.close();
//
//
//        // Kolom 11: Pasien Akhir Bulan (Perhitungan otomatis)
//        pasienAkhirBulan = pasienAwalBulan + pasienMasuk + pasienPindahan - 
//                           (pasienKeluarHidup + pasienKeluarMatiLK48 + pasienKeluarMatiLK48Plus + 
//                            pasienKeluarMatiPR48 + pasienKeluarMatiPR48Plus + pasienDipindahkan);
//
//        
//        // Kolom 12: Jumlah Hari Perawatan
//        sql = "SELECT " +
//              "SUM(CASE " +
//              "    WHEN ki.tgl_keluar IS NOT NULL THEN DATEDIFF(ki.tgl_keluar, ki.tgl_masuk) + 1 " +
//              "    ELSE DATEDIFF(?, ki.tgl_masuk) + 1 " +
//              "END) AS jumlah_hari_perawatan " +
//              "FROM kamar_inap ki " +
//              "WHERE ki.tgl_masuk BETWEEN ? AND ? ";              
//        
//        ps = koneksi.prepareStatement(sql);
//        ps.setString(1, Valid.SetTgl(Tgl2.getSelectedItem() + "")); // Jika pasien masih dirawat, gunakan Tgl2
//        ps.setString(2, Valid.SetTgl(Tgl1.getSelectedItem() + "")); // Filter masuk sesuai periode
//        ps.setString(3, Valid.SetTgl(Tgl2.getSelectedItem() + "")); // Filter masuk sesuai periode
//        rs = ps.executeQuery();
//        while (rs.next()) {
//            jumlahHariPerawatan = rs.getInt("jumlah_hari_perawatan");
//        }
//        rs.close();
//        ps.close();
//
//
//        // Kolom 13-18: Rincian Hari Perawatan per Kelas 
//        sql = "SELECT k.kelas, " +
//              "IFNULL(SUM( " +
//              "    CASE " +
//              "        WHEN ki.stts_pulang NOT IN ('Pindah Kamar', '-') AND ki.tgl_keluar IS NOT NULL THEN " +
//              "            GREATEST(DATEDIFF(LEAST(ki.tgl_keluar, ?), GREATEST(ki.tgl_masuk, ?)), 1) " +
//              "        WHEN ki.tgl_keluar IS NULL THEN " +
//              "            DATEDIFF(CURDATE(), GREATEST(ki.tgl_masuk, ?)) " +
//              "        ELSE 0 " +
//              "    END " +
//              "), 0) AS total_hari_perawatan " +
//              "FROM kamar_inap ki " +
//              "LEFT JOIN kamar k ON ki.kd_kamar = k.kd_kamar " +
//              "WHERE (ki.tgl_masuk <= ? AND (ki.tgl_keluar >= ? OR ki.tgl_keluar IS NULL)) " +
//              "GROUP BY k.kelas";
//
//        ps = koneksi.prepareStatement(sql);
//        ps.setString(1, Valid.SetTgl(Tgl1.getSelectedItem() + ""));
//        ps.setString(2, Valid.SetTgl(Tgl2.getSelectedItem() + ""));
//        ps.setString(3, Valid.SetTgl(Tgl1.getSelectedItem() + ""));
//        ps.setString(4, Valid.SetTgl(Tgl2.getSelectedItem() + ""));
//        ps.setString(5, Valid.SetTgl(Tgl1.getSelectedItem() + ""));
//        rs = ps.executeQuery();
//        while (rs.next()) {
//            System.out.println("Kelas: " + rs.getString("kelas") + 
//                               " | Total Hari Perawatan: " + rs.getInt("total_hari_perawatan"));
//        }
//        rs.close();
//        ps.close();
//
//
//        // Kolom 19: Alokasi Tempat Tidur Awal Bulan (Query akan diisi nanti)
//        sql = "SELECT k.kelas, COUNT(k.kd_kamar) AS jumlah_tt_akhir_bulan " +
//              "FROM kamar k " +
//              "WHERE k.statusdata = 1 " +
//              "GROUP BY k.kelas";
//
//        ps = koneksi.prepareStatement(sql);
//        rs = ps.executeQuery();
//        while (rs.next()) {
//            System.out.println("Kelas: " + rs.getString("kelas") + 
//                               " | Tempat Tidur Akhir Bulan: " + rs.getInt("jumlah_tt_akhir_bulan"));
//        }
//        rs.close();
//        ps.close();
//
//        // Tambahkan data ke tabel
//        tabMode.addRow(new Object[]{
//            1,  // No
//            "Jenis Pelayanan", // Nanti diisi dengan jenis pelayanan yang sesuai
//            pasienAwalBulan,
//            pasienMasuk,
//            pasienPindahan,
//            pasienDipindahkan,
//            pasienKeluarHidup,
//            pasienKeluarMatiLK48,
//            pasienKeluarMatiLK48Plus,
//            pasienKeluarMatiPR48,
//            pasienKeluarMatiPR48Plus,
//            jumlahLamaDirawat,
//            pasienAkhirBulan,
//            jumlahHariPerawatan,
//            hariPerawatanVVIP,
//            hariPerawatanVIP,
//            hariPerawatanKelas1,
//            hariPerawatanKelas2,
//            hariPerawatanKelas3,
//            hariPerawatanKelasKhusus,
//            alokasiTempatTidurAwal
//        });
//
//    } catch (Exception e) {
//        System.out.println("Error tampil RL 3.2: " + e);
//    }
//}
 
private void tampil() {
    Valid.tabelKosong(tabMode);

    try {
        // Ambil tanggal awal dan akhir dari input pengguna
        String tglAwal = Valid.SetTgl(Tgl1.getSelectedItem() + "");
        String tglAkhir = Valid.SetTgl(Tgl2.getSelectedItem() + "");

        // Inisialisasi variabel untuk setiap kolom laporan
        int pasienAwalBulan = 0, pasienMasuk = 0, pasienPindahan = 0, pasienDipindahkan = 0, pasienKeluarHidup = 0;
        int pasienKeluarMatiLK48 = 0, pasienKeluarMatiLK48Plus = 0, pasienKeluarMatiPR48 = 0, pasienKeluarMatiPR48Plus = 0;
        int jumlahLamaDirawat = 0, pasienAkhirBulan = 0, jumlahHariPerawatan = 0;
        int hariPerawatanVVIP = 0, hariPerawatanVIP = 0, hariPerawatanKelas1 = 0, hariPerawatanKelas2 = 0;
        int hariPerawatanKelas3 = 0, hariPerawatanKelasKhusus = 0, alokasiTempatTidurAwal = 0;

        String sql;
        
        // **Kolom 1: Pasien Awal Bulan**
        sql = 
                "SELECT COUNT(*) AS pasien_awal_bulan "+
                "FROM kamar_inap "+
                "WHERE tgl_masuk < ? "+
                "AND (tgl_keluar IS NULL OR tgl_keluar >= ?)";
        
        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
            ps.setString(1, tglAwal);
            ps.setString(2, tglAwal);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    pasienAwalBulan = rs.getInt("pasien_awal_bulan");
                    }
                }
            }

        // **Kolom 2: Pasien Masuk**
        sql =   
//                "SELECT COUNT(DISTINCT rp.no_rawat) AS pasien_masuk "+
                "SELECT COUNT(*) AS pasien_masuk "+
                "FROM reg_periksa rp "+
                "JOIN kamar_inap ki ON rp.no_rawat = ki.no_rawat "+
                "WHERE rp.status_lanjut = 'Ranap' "+
                "AND rp.stts <> 'Batal' "+
                "AND ki.tgl_masuk BETWEEN ? AND ?";
        
        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
            ps.setString(1, tglAwal);
            ps.setString(2, tglAkhir);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    pasienMasuk = rs.getInt("pasien_masuk");
                    }
                }
            }

//        // **Kolom 3: Pasien Pindahan**
//        sql = 
//            " SELECT COUNT(DISTINCT no_rawat) AS pasien_pindahan FROM kamar_inap " +
//            " WHERE stts_pulang = 'Pindah Kamar' " +
//            " AND tgl_keluar BETWEEN ? AND ?"; 
//        
//        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
//            ps.setString(1, tglAwal);
//            ps.setString(2, tglAkhir);
//            try (ResultSet rs = ps.executeQuery()) {
//                if (rs.next()) {
//                    pasienDipindahkan = rs.getInt("pasien_pindahan");
//                    }
//                }
//            }
        
        
        // **Kolom 3: Pasien Pindahan**
        sql =     
            " SELECT " +
            "(SELECT COUNT(DISTINCT no_rawat) FROM kamar_inap " +
            " WHERE stts_pulang = 'Pindah Kamar' " +
            " AND tgl_keluar BETWEEN ? AND ?) AS pasien_pindahan, " +

            "(SELECT COUNT(DISTINCT no_rawat) FROM kamar_inap ki1 " +
            " WHERE tgl_masuk BETWEEN ? AND ? " +
            " AND EXISTS (SELECT 1 FROM kamar_inap ki2 " +
            "             WHERE ki2.no_rawat = ki1.no_rawat " +
            "             AND ki2.tgl_keluar = ki1.tgl_masuk)) AS pasien_dipindahkan"; 

        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
            ps.setString(1, Valid.SetTgl(Tgl1.getSelectedItem() + "")); 
            ps.setString(2, Valid.SetTgl(Tgl2.getSelectedItem() + "")); 

            ps.setString(3, Valid.SetTgl(Tgl1.getSelectedItem() + "")); 
            ps.setString(4, Valid.SetTgl(Tgl2.getSelectedItem() + "")); 

            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    pasienPindahan = rs.getInt("pasien_pindahan");
                    pasienDipindahkan = rs.getInt("pasien_dipindahkan");

//                    System.out.println("Pasien Pindahan: " + pasienPindahan);
//                    System.out.println("Pasien Dipindahkan: " + pasienDipindahkan);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

//        // **Kolom 4: Pasien Dipindahkan**
//        sql = 
//            " SELECT COUNT(DISTINCT no_rawat) AS pasien_dipindahkan FROM kamar_inap ki1 " +
//            " WHERE tgl_masuk BETWEEN ? AND ? " +
//            " AND EXISTS (SELECT 1 FROM kamar_inap ki2 " +
//            "             WHERE ki2.no_rawat = ki1.no_rawat " +
//            "             AND ki2.tgl_keluar = ki1.tgl_masuk)";
//        
//        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
//            ps.setString(1, tglAwal);
//            ps.setString(2, tglAkhir);
//            try (ResultSet rs = ps.executeQuery()) {
//                if (rs.next()) {
//                    pasienDipindahkan = rs.getInt("pasien_dipindahkan");
//                    }
//                }
//            }

        // **Kolom 5: Pasien Keluar Hidup**
        sql = "SELECT COUNT(*) AS pasien_keluar_hidup FROM kamar_inap " +
              "WHERE tgl_keluar BETWEEN ? AND ? " +
              "AND stts_pulang NOT IN ('Meninggal')";
        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
            ps.setString(1, tglAwal);
            ps.setString(2, tglAkhir);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    pasienKeluarHidup = rs.getInt("pasien_keluar_hidup");
                    }
                }
            }

        // **Kolom 6-9: Pasien Keluar Meninggal (<48 jam dan ≥48 jam)**
        sql = "SELECT " +
              "COUNT(CASE WHEN pasien.jk = 'L' AND TIMESTAMPDIFF(HOUR, CONCAT(ki.tgl_masuk, ' ', ki.jam_masuk), CONCAT(ki.tgl_keluar, ' ', ki.jam_keluar)) < 48 THEN 1 END) AS meninggal_lk_48, " +
              "COUNT(CASE WHEN pasien.jk = 'L' AND TIMESTAMPDIFF(HOUR, CONCAT(ki.tgl_masuk, ' ', ki.jam_masuk), CONCAT(ki.tgl_keluar, ' ', ki.jam_keluar)) >= 48 THEN 1 END) AS meninggal_lk_lebih_48, " +
              "COUNT(CASE WHEN pasien.jk = 'P' AND TIMESTAMPDIFF(HOUR, CONCAT(ki.tgl_masuk, ' ', ki.jam_masuk), CONCAT(ki.tgl_keluar, ' ', ki.jam_keluar)) < 48 THEN 1 END) AS meninggal_pr_48, " +
              "COUNT(CASE WHEN pasien.jk = 'P' AND TIMESTAMPDIFF(HOUR, CONCAT(ki.tgl_masuk, ' ', ki.jam_masuk), CONCAT(ki.tgl_keluar, ' ', ki.jam_keluar)) >= 48 THEN 1 END) AS meninggal_pr_lebih_48 " +
              "FROM reg_periksa rp " +
              "JOIN kamar_inap ki ON rp.no_rawat = ki.no_rawat " +
              "JOIN pasien ON rp.no_rkm_medis = pasien.no_rkm_medis " +
              "WHERE CONCAT(ki.tgl_keluar, ' ', ki.jam_keluar) BETWEEN ? AND ? " +
              "AND ki.stts_pulang = 'Meninggal' AND rp.status_lanjut='Ranap'";
        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
            ps.setString(1, tglAwal + " 00:00:00");
            ps.setString(2, tglAkhir + " 23:59:59");
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    pasienKeluarMatiLK48 = rs.getInt("meninggal_lk_48");
                    pasienKeluarMatiLK48Plus = rs.getInt("meninggal_lk_lebih_48");
                    pasienKeluarMatiPR48 = rs.getInt("meninggal_pr_48");
                    pasienKeluarMatiPR48Plus = rs.getInt("meninggal_pr_lebih_48");
                    }
                }
            }
    
        // **Kolom 10: Jumlah Lama Dirawat**
        sql = 
        "SELECT " +
        "IFNULL( " +
        "    SUM( " +
        "        CASE " +       
        "            WHEN "
                + "ki.tgl_keluar IS NOT NULL THEN " +
        "                GREATEST(DATEDIFF(LEAST(ki.tgl_keluar, ?), GREATEST(ki.tgl_masuk, ?)), 1) " + // hitung lama rawat dengan membatasi tanggal
        "            WHEN ki.tgl_keluar IS NULL THEN " +
        "                DATEDIFF(CURDATE(), GREATEST(ki.tgl_masuk, ?)) " + 
        "            ELSE 0 " +
        "        END " +
        "    ), 0 " +
        ") AS jumlah_lama_dirawat " +
        "FROM kamar_inap ki " +
        "WHERE (ki.tgl_masuk <= ? AND (ki.tgl_keluar >= ? OR ki.tgl_keluar IS NULL)) "; 
        
        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
        ps.setString(1, Valid.SetTgl(Tgl2.getSelectedItem() + "")); // untuk LEAST(ki.tgl_keluar, Tgl2)
        ps.setString(2, Valid.SetTgl(Tgl1.getSelectedItem() + "")); // untuk GREATEST(ki.tgl_masuk, Tgl1)
        ps.setString(3, Valid.SetTgl(Tgl1.getSelectedItem() + "")); // untuk GREATEST(ki.tgl_masuk, Tgl1)
        ps.setString(4, Valid.SetTgl(Tgl2.getSelectedItem() + "")); // untuk ki.tgl_masuk <= Tgl2
        ps.setString(5, Valid.SetTgl(Tgl1.getSelectedItem() + "")); // untuk ki.tgl_keluar >= Tgl1
                   
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    jumlahLamaDirawat = rs.getInt("jumlah_lama_dirawat");
                    }
                }
            }
        
        
//        sql = "SELECT SUM(DATEDIFF(LEAST(ki.tgl_keluar, ?), ki.tgl_masuk)) AS jumlah_lama_dirawat " +
//              "FROM kamar_inap ki " +
//              "WHERE ki.tgl_masuk <= ? AND (ki.tgl_keluar >= ? OR ki.tgl_keluar IS NULL)";
        
//        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
//            ps.setString(1, tglAkhir);
//            ps.setString(2, tglAkhir);
//            ps.setString(3, tglAwal);
//            try (ResultSet rs = ps.executeQuery()) {
//                if (rs.next()) {
//                    jumlahLamaDirawat = rs.getInt("jumlah_lama_dirawat");
//                    }
//                }
//            }

    // **Kolom 11: Pasien Akhir Bulan (Debugging)**
        sql = 
            "SELECT " +
            "(SELECT COUNT(*) FROM kamar_inap " +
            " WHERE tgl_masuk < ? " +
            " AND (tgl_keluar IS NULL OR tgl_keluar >= ?)) AS pasien_awal_bulan, " +

//            "(SELECT COUNT(DISTINCT rp.no_rawat) "+
            "(SELECT COUNT(*) "+    
            "FROM reg_periksa rp "+
            "JOIN kamar_inap ki ON rp.no_rawat = ki.no_rawat "+
            "WHERE rp.status_lanjut = 'Ranap' "+
            "AND rp.stts <> 'Batal' "+
            "AND ki.tgl_masuk BETWEEN ? AND ?) AS pasien_masuk, "+
            
            "(SELECT COUNT(DISTINCT no_rawat) FROM kamar_inap " +
            " WHERE stts_pulang = 'Pindah Kamar' " +
            " AND tgl_keluar BETWEEN ? AND ?) AS pasien_pindahan, " +    
        
//            "(SELECT COUNT(*) FROM transfer_pasien_antar_ruang " +
//            " WHERE ruang_selanjutnya IS NOT NULL " +
//            " AND ruang_selanjutnya <> '' " +
//            " AND tanggal_pindah BETWEEN ? AND ?) AS pasien_pindahan, " +

            "(SELECT COUNT(*) FROM kamar_inap " +
            " WHERE tgl_keluar BETWEEN ? AND ? " +
            " AND stts_pulang NOT IN ('Meninggal')) AS pasien_keluar_hidup, " +

            "(SELECT COUNT(*) FROM kamar_inap " +
            " WHERE tgl_keluar BETWEEN ? AND ? " +
            " AND stts_pulang = 'Meninggal') AS pasien_keluar_meninggal,"+ 

            "(SELECT COUNT(DISTINCT no_rawat) FROM kamar_inap ki1 " +
            " WHERE tgl_masuk BETWEEN ? AND ? " +
            " AND EXISTS (SELECT 1 FROM kamar_inap ki2 " +
            "             WHERE ki2.no_rawat = ki1.no_rawat " +
            "             AND ki2.tgl_keluar = ki1.tgl_masuk)) AS pasien_dipindahkan";
        
//            "(SELECT COUNT(*) FROM transfer_pasien_antar_ruang " +
//            " WHERE asal_ruang IS NOT NULL " +
//            " AND asal_ruang <> '' " +
//            " AND tanggal_masuk BETWEEN ? AND ?) AS pasien_dipindahkan";

        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
            ps.setString(1, Valid.SetTgl(Tgl1.getSelectedItem() + "")); 
            ps.setString(2, Valid.SetTgl(Tgl1.getSelectedItem() + "")); 

            ps.setString(3, Valid.SetTgl(Tgl1.getSelectedItem() + "")); 
            ps.setString(4, Valid.SetTgl(Tgl2.getSelectedItem() + "")); 

            ps.setString(5, Valid.SetTgl(Tgl1.getSelectedItem() + "")); 
            ps.setString(6, Valid.SetTgl(Tgl2.getSelectedItem() + "")); 

            ps.setString(7, Valid.SetTgl(Tgl1.getSelectedItem() + "")); 
            ps.setString(8, Valid.SetTgl(Tgl2.getSelectedItem() + "")); 

            ps.setString(9, Valid.SetTgl(Tgl1.getSelectedItem() + "")); 
            ps.setString(10, Valid.SetTgl(Tgl2.getSelectedItem() + "")); 

            ps.setString(11, Valid.SetTgl(Tgl1.getSelectedItem() + "")); 
            ps.setString(12, Valid.SetTgl(Tgl2.getSelectedItem() + "")); 

            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
//                    pasienAkhirBulan = rs.getInt("pasien_awal_bulan") + 
//                                       rs.getInt("pasien_masuk") + 
//                                       rs.getInt("pasien_pindahan") - 
//                                       rs.getInt("pasien_keluar_hidup") - 
//                                       rs.getInt("pasien_keluar_meninggal") - 
//                                       rs.getInt("pasien_dipindahkan");
                    
                    pasienAkhirBulan = rs.getInt("pasien_awal_bulan") + 
                                       rs.getInt("pasien_masuk") - 
                                       rs.getInt("pasien_keluar_hidup") - 
                                       rs.getInt("pasien_keluar_meninggal");                                       

                    // **Tambahkan debugging untuk melihat nilai perhitungan**
//                    System.out.println("DEBUG:");
//                    System.out.println("Pasien Awal Bulan: " + rs.getInt("pasien_awal_bulan"));
//                    System.out.println("Pasien Masuk: " + rs.getInt("pasien_masuk"));
////                    System.out.println("Pasien Pindahan: " + rs.getInt("pasien_pindahan"));
//                    System.out.println("Pasien Keluar Hidup: " + rs.getInt("pasien_keluar_hidup"));
//                    System.out.println("Pasien Keluar Meninggal: " + rs.getInt("pasien_keluar_meninggal"));
////                    System.out.println("Pasien Dipindahkan: " + rs.getInt("pasien_dipindahkan"));
//                    System.out.println("Total Pasien Akhir Bulan: " + pasienAkhirBulan);
                }
            }
        }

        // **Kolom 12: Jumlah Hari Perawatan**
        sql = "SELECT SUM(DATEDIFF(LEAST(COALESCE(ki.tgl_keluar, ?), ?), ki.tgl_masuk) + 1) AS jumlah_hari_perawatan " +
              "FROM kamar_inap ki " +
              "WHERE ki.tgl_masuk BETWEEN ? AND ?";
        
        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
            ps.setString(1, tglAkhir); // Untuk pasien yang belum keluar, anggap masih dirawat sampai tglAkhir
            ps.setString(2, tglAkhir);
            ps.setString(3, tglAwal);
            ps.setString(4, tglAkhir);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    jumlahHariPerawatan = rs.getInt("jumlah_hari_perawatan");
                    }
                }
            }
        

        // **Kolom 13-18: Hari Perawatan Berdasarkan Kelas**
       sql = 
        "SELECT k.kelas, " +
        "IFNULL( " +
        "    SUM( " +
        "        CASE " +       
        "            WHEN "
                + "ki.tgl_keluar IS NOT NULL THEN " +
        "                GREATEST(DATEDIFF(LEAST(ki.tgl_keluar, ?), GREATEST(ki.tgl_masuk, ?)) + 1, 1 ) " + // hitung lama rawat dengan membatasi tanggal
        "            WHEN ki.tgl_keluar IS NULL THEN " +
        "                DATEDIFF(CURDATE(), GREATEST(ki.tgl_masuk, ?)) + 1 " + 
        "            ELSE 0 " +
        "        END " +
        "    ), 0 " +
        ") AS total_hari_perawatan " +
        "FROM kamar_inap ki " +
        "JOIN kamar k ON ki.kd_kamar = k.kd_kamar " +
        "WHERE (ki.tgl_masuk <= ? AND (ki.tgl_keluar >= ? OR ki.tgl_keluar IS NULL)) "+
        "GROUP BY k.kelas " +
        "ORDER BY FIELD(k.kelas, 'Kelas VVIP', 'Kelas VIP', 'Kelas 1', 'Kelas 2', 'Kelas 3', 'Kelas Utama')";        
        
        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
        ps.setString(1, Valid.SetTgl(Tgl2.getSelectedItem() + "")); // untuk LEAST(ki.tgl_keluar, Tgl2)
        ps.setString(2, Valid.SetTgl(Tgl1.getSelectedItem() + "")); // untuk GREATEST(ki.tgl_masuk, Tgl1)
        ps.setString(3, Valid.SetTgl(Tgl1.getSelectedItem() + "")); // untuk GREATEST(ki.tgl_masuk, Tgl1)
        ps.setString(4, Valid.SetTgl(Tgl2.getSelectedItem() + "")); // untuk ki.tgl_masuk <= Tgl2
        ps.setString(5, Valid.SetTgl(Tgl1.getSelectedItem() + "")); // untuk ki.tgl_keluar >= Tgl1
                   
//            try (ResultSet rs = ps.executeQuery()) {
//                if (rs.next()) {
//                    jumlahLamaDirawat = rs.getInt("jumlah_lama_dirawat");
//                    }
//                }
//            }
        
        
        
        
        
        
        
        
        
        
//        sql = "SELECT k.kelas, SUM(DATEDIFF(LEAST(COALESCE(ki.tgl_keluar, ?), ?), ki.tgl_masuk) + 1) AS total_hari_perawatan " +
//              "FROM kamar_inap ki " +
//              "JOIN kamar k ON ki.kd_kamar = k.kd_kamar " +
//              "WHERE ki.tgl_masuk BETWEEN ? AND ? " +
//              "GROUP BY k.kelas " +
//              "ORDER BY FIELD(k.kelas, 'Kelas VVIP', 'Kelas VIP', 'Kelas 1', 'Kelas 2', 'Kelas 3', 'Kelas Utama')";
//        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
//            ps.setString(1, tglAkhir);
//            ps.setString(2, tglAkhir);
//            ps.setString(3, tglAwal);
//            ps.setString(4, tglAkhir);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    switch (rs.getString("kelas")) {
                        case "Kelas VVIP":
                            hariPerawatanVVIP = rs.getInt("total_hari_perawatan");
                            break;
                        case "Kelas VIP":
                            hariPerawatanVIP = rs.getInt("total_hari_perawatan");
                            break;
                        case "Kelas 1":
                            hariPerawatanKelas1 = rs.getInt("total_hari_perawatan");
                            break;
                        case "Kelas 2":
                            hariPerawatanKelas2 = rs.getInt("total_hari_perawatan");
                            break;
                        case "Kelas 3":
                            hariPerawatanKelas3 = rs.getInt("total_hari_perawatan");
                            break;
                        case "Kelas Utama":
                            hariPerawatanKelasKhusus = rs.getInt("total_hari_perawatan");
                            break;
                        default:
                            break;
                        }
                    }
                }
            }

        // **Kolom 19: Alokasi Tempat Tidur Awal Bulan**
        sql = "SELECT COUNT(*) AS jumlah_tt_awal_bulan FROM kamar WHERE statusdata = '1'";
        try (PreparedStatement ps = koneksi.prepareStatement(sql)) {
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    alokasiTempatTidurAwal = rs.getInt("jumlah_tt_awal_bulan");
                }
            }
        }

        // **Kolom 20: Alokasi Tempat Tidur Akhir Bulan**
        int alokasiTempatTidurAkhir = alokasiTempatTidurAwal; // Asumsinya tidak berubah

        // **Memasukkan Data ke Tabel Form**
        tabMode.addRow(new Object[]{1,
            "Umum", // Nanti diisi sesuai jenis pelayanan rumah sakit
            pasienAwalBulan,
            pasienMasuk,
            pasienPindahan,
            pasienDipindahkan,
            pasienKeluarHidup,
            pasienKeluarMatiLK48,
            pasienKeluarMatiLK48Plus,
            pasienKeluarMatiPR48,
            pasienKeluarMatiPR48Plus,
            jumlahLamaDirawat,
            pasienAkhirBulan,
            jumlahHariPerawatan = hariPerawatanVVIP + hariPerawatanVIP + hariPerawatanKelas1 + hariPerawatanKelas2 + hariPerawatanKelas3 + hariPerawatanKelasKhusus,            
            hariPerawatanVVIP,
            hariPerawatanVIP,
            hariPerawatanKelas1,
            hariPerawatanKelas2,
            hariPerawatanKelas3,
            hariPerawatanKelasKhusus,
            alokasiTempatTidurAwal,
            alokasiTempatTidurAkhir
        });

    } catch (SQLException e) {
        System.out.println("Error tampil RL 3.2: " + e);
    }
}    
    
}
